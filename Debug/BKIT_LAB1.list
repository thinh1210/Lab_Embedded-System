
BKIT_LAB1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003024  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  080031ac  080031ac  000041ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031bc  080031bc  0000501c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080031bc  080031bc  000041bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031c4  080031c4  0000501c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031c4  080031c4  000041c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080031c8  080031c8  000041c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  080031cc  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000501c  2**0
                  CONTENTS
 10 .bss          00000160  2000001c  2000001c  0000501c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000017c  2000017c  0000501c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000501c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ddd3  00000000  00000000  0000504c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000279f  00000000  00000000  00012e1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e90  00000000  00000000  000155c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b1b  00000000  00000000  00016450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002919  00000000  00000000  00016f6b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000113dd  00000000  00000000  00019884  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cabb4  00000000  00000000  0002ac61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000f5815  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b0c  00000000  00000000  000f5858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005f  00000000  00000000  000f9364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003194 	.word	0x08003194

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08003194 	.word	0x08003194

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b988 	b.w	80004f0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	468e      	mov	lr, r1
 8000200:	4604      	mov	r4, r0
 8000202:	4688      	mov	r8, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d962      	bls.n	80002d4 <__udivmoddi4+0xdc>
 800020e:	fab2 f682 	clz	r6, r2
 8000212:	b14e      	cbz	r6, 8000228 <__udivmoddi4+0x30>
 8000214:	f1c6 0320 	rsb	r3, r6, #32
 8000218:	fa01 f806 	lsl.w	r8, r1, r6
 800021c:	fa20 f303 	lsr.w	r3, r0, r3
 8000220:	40b7      	lsls	r7, r6
 8000222:	ea43 0808 	orr.w	r8, r3, r8
 8000226:	40b4      	lsls	r4, r6
 8000228:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800022c:	fa1f fc87 	uxth.w	ip, r7
 8000230:	fbb8 f1fe 	udiv	r1, r8, lr
 8000234:	0c23      	lsrs	r3, r4, #16
 8000236:	fb0e 8811 	mls	r8, lr, r1, r8
 800023a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023e:	fb01 f20c 	mul.w	r2, r1, ip
 8000242:	429a      	cmp	r2, r3
 8000244:	d909      	bls.n	800025a <__udivmoddi4+0x62>
 8000246:	18fb      	adds	r3, r7, r3
 8000248:	f101 30ff 	add.w	r0, r1, #4294967295
 800024c:	f080 80ea 	bcs.w	8000424 <__udivmoddi4+0x22c>
 8000250:	429a      	cmp	r2, r3
 8000252:	f240 80e7 	bls.w	8000424 <__udivmoddi4+0x22c>
 8000256:	3902      	subs	r1, #2
 8000258:	443b      	add	r3, r7
 800025a:	1a9a      	subs	r2, r3, r2
 800025c:	b2a3      	uxth	r3, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800026a:	fb00 fc0c 	mul.w	ip, r0, ip
 800026e:	459c      	cmp	ip, r3
 8000270:	d909      	bls.n	8000286 <__udivmoddi4+0x8e>
 8000272:	18fb      	adds	r3, r7, r3
 8000274:	f100 32ff 	add.w	r2, r0, #4294967295
 8000278:	f080 80d6 	bcs.w	8000428 <__udivmoddi4+0x230>
 800027c:	459c      	cmp	ip, r3
 800027e:	f240 80d3 	bls.w	8000428 <__udivmoddi4+0x230>
 8000282:	443b      	add	r3, r7
 8000284:	3802      	subs	r0, #2
 8000286:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028a:	eba3 030c 	sub.w	r3, r3, ip
 800028e:	2100      	movs	r1, #0
 8000290:	b11d      	cbz	r5, 800029a <__udivmoddi4+0xa2>
 8000292:	40f3      	lsrs	r3, r6
 8000294:	2200      	movs	r2, #0
 8000296:	e9c5 3200 	strd	r3, r2, [r5]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d905      	bls.n	80002ae <__udivmoddi4+0xb6>
 80002a2:	b10d      	cbz	r5, 80002a8 <__udivmoddi4+0xb0>
 80002a4:	e9c5 0100 	strd	r0, r1, [r5]
 80002a8:	2100      	movs	r1, #0
 80002aa:	4608      	mov	r0, r1
 80002ac:	e7f5      	b.n	800029a <__udivmoddi4+0xa2>
 80002ae:	fab3 f183 	clz	r1, r3
 80002b2:	2900      	cmp	r1, #0
 80002b4:	d146      	bne.n	8000344 <__udivmoddi4+0x14c>
 80002b6:	4573      	cmp	r3, lr
 80002b8:	d302      	bcc.n	80002c0 <__udivmoddi4+0xc8>
 80002ba:	4282      	cmp	r2, r0
 80002bc:	f200 8105 	bhi.w	80004ca <__udivmoddi4+0x2d2>
 80002c0:	1a84      	subs	r4, r0, r2
 80002c2:	eb6e 0203 	sbc.w	r2, lr, r3
 80002c6:	2001      	movs	r0, #1
 80002c8:	4690      	mov	r8, r2
 80002ca:	2d00      	cmp	r5, #0
 80002cc:	d0e5      	beq.n	800029a <__udivmoddi4+0xa2>
 80002ce:	e9c5 4800 	strd	r4, r8, [r5]
 80002d2:	e7e2      	b.n	800029a <__udivmoddi4+0xa2>
 80002d4:	2a00      	cmp	r2, #0
 80002d6:	f000 8090 	beq.w	80003fa <__udivmoddi4+0x202>
 80002da:	fab2 f682 	clz	r6, r2
 80002de:	2e00      	cmp	r6, #0
 80002e0:	f040 80a4 	bne.w	800042c <__udivmoddi4+0x234>
 80002e4:	1a8a      	subs	r2, r1, r2
 80002e6:	0c03      	lsrs	r3, r0, #16
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	b280      	uxth	r0, r0
 80002ee:	b2bc      	uxth	r4, r7
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb2 fcfe 	udiv	ip, r2, lr
 80002f6:	fb0e 221c 	mls	r2, lr, ip, r2
 80002fa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002fe:	fb04 f20c 	mul.w	r2, r4, ip
 8000302:	429a      	cmp	r2, r3
 8000304:	d907      	bls.n	8000316 <__udivmoddi4+0x11e>
 8000306:	18fb      	adds	r3, r7, r3
 8000308:	f10c 38ff 	add.w	r8, ip, #4294967295
 800030c:	d202      	bcs.n	8000314 <__udivmoddi4+0x11c>
 800030e:	429a      	cmp	r2, r3
 8000310:	f200 80e0 	bhi.w	80004d4 <__udivmoddi4+0x2dc>
 8000314:	46c4      	mov	ip, r8
 8000316:	1a9b      	subs	r3, r3, r2
 8000318:	fbb3 f2fe 	udiv	r2, r3, lr
 800031c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000320:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000324:	fb02 f404 	mul.w	r4, r2, r4
 8000328:	429c      	cmp	r4, r3
 800032a:	d907      	bls.n	800033c <__udivmoddi4+0x144>
 800032c:	18fb      	adds	r3, r7, r3
 800032e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x142>
 8000334:	429c      	cmp	r4, r3
 8000336:	f200 80ca 	bhi.w	80004ce <__udivmoddi4+0x2d6>
 800033a:	4602      	mov	r2, r0
 800033c:	1b1b      	subs	r3, r3, r4
 800033e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000342:	e7a5      	b.n	8000290 <__udivmoddi4+0x98>
 8000344:	f1c1 0620 	rsb	r6, r1, #32
 8000348:	408b      	lsls	r3, r1
 800034a:	fa22 f706 	lsr.w	r7, r2, r6
 800034e:	431f      	orrs	r7, r3
 8000350:	fa0e f401 	lsl.w	r4, lr, r1
 8000354:	fa20 f306 	lsr.w	r3, r0, r6
 8000358:	fa2e fe06 	lsr.w	lr, lr, r6
 800035c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000360:	4323      	orrs	r3, r4
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	fa1f fc87 	uxth.w	ip, r7
 800036a:	fbbe f0f9 	udiv	r0, lr, r9
 800036e:	0c1c      	lsrs	r4, r3, #16
 8000370:	fb09 ee10 	mls	lr, r9, r0, lr
 8000374:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000378:	fb00 fe0c 	mul.w	lr, r0, ip
 800037c:	45a6      	cmp	lr, r4
 800037e:	fa02 f201 	lsl.w	r2, r2, r1
 8000382:	d909      	bls.n	8000398 <__udivmoddi4+0x1a0>
 8000384:	193c      	adds	r4, r7, r4
 8000386:	f100 3aff 	add.w	sl, r0, #4294967295
 800038a:	f080 809c 	bcs.w	80004c6 <__udivmoddi4+0x2ce>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f240 8099 	bls.w	80004c6 <__udivmoddi4+0x2ce>
 8000394:	3802      	subs	r0, #2
 8000396:	443c      	add	r4, r7
 8000398:	eba4 040e 	sub.w	r4, r4, lr
 800039c:	fa1f fe83 	uxth.w	lr, r3
 80003a0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003a4:	fb09 4413 	mls	r4, r9, r3, r4
 80003a8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003ac:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b0:	45a4      	cmp	ip, r4
 80003b2:	d908      	bls.n	80003c6 <__udivmoddi4+0x1ce>
 80003b4:	193c      	adds	r4, r7, r4
 80003b6:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ba:	f080 8082 	bcs.w	80004c2 <__udivmoddi4+0x2ca>
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d97f      	bls.n	80004c2 <__udivmoddi4+0x2ca>
 80003c2:	3b02      	subs	r3, #2
 80003c4:	443c      	add	r4, r7
 80003c6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ca:	eba4 040c 	sub.w	r4, r4, ip
 80003ce:	fba0 ec02 	umull	lr, ip, r0, r2
 80003d2:	4564      	cmp	r4, ip
 80003d4:	4673      	mov	r3, lr
 80003d6:	46e1      	mov	r9, ip
 80003d8:	d362      	bcc.n	80004a0 <__udivmoddi4+0x2a8>
 80003da:	d05f      	beq.n	800049c <__udivmoddi4+0x2a4>
 80003dc:	b15d      	cbz	r5, 80003f6 <__udivmoddi4+0x1fe>
 80003de:	ebb8 0203 	subs.w	r2, r8, r3
 80003e2:	eb64 0409 	sbc.w	r4, r4, r9
 80003e6:	fa04 f606 	lsl.w	r6, r4, r6
 80003ea:	fa22 f301 	lsr.w	r3, r2, r1
 80003ee:	431e      	orrs	r6, r3
 80003f0:	40cc      	lsrs	r4, r1
 80003f2:	e9c5 6400 	strd	r6, r4, [r5]
 80003f6:	2100      	movs	r1, #0
 80003f8:	e74f      	b.n	800029a <__udivmoddi4+0xa2>
 80003fa:	fbb1 fcf2 	udiv	ip, r1, r2
 80003fe:	0c01      	lsrs	r1, r0, #16
 8000400:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000404:	b280      	uxth	r0, r0
 8000406:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800040a:	463b      	mov	r3, r7
 800040c:	4638      	mov	r0, r7
 800040e:	463c      	mov	r4, r7
 8000410:	46b8      	mov	r8, r7
 8000412:	46be      	mov	lr, r7
 8000414:	2620      	movs	r6, #32
 8000416:	fbb1 f1f7 	udiv	r1, r1, r7
 800041a:	eba2 0208 	sub.w	r2, r2, r8
 800041e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000422:	e766      	b.n	80002f2 <__udivmoddi4+0xfa>
 8000424:	4601      	mov	r1, r0
 8000426:	e718      	b.n	800025a <__udivmoddi4+0x62>
 8000428:	4610      	mov	r0, r2
 800042a:	e72c      	b.n	8000286 <__udivmoddi4+0x8e>
 800042c:	f1c6 0220 	rsb	r2, r6, #32
 8000430:	fa2e f302 	lsr.w	r3, lr, r2
 8000434:	40b7      	lsls	r7, r6
 8000436:	40b1      	lsls	r1, r6
 8000438:	fa20 f202 	lsr.w	r2, r0, r2
 800043c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000440:	430a      	orrs	r2, r1
 8000442:	fbb3 f8fe 	udiv	r8, r3, lr
 8000446:	b2bc      	uxth	r4, r7
 8000448:	fb0e 3318 	mls	r3, lr, r8, r3
 800044c:	0c11      	lsrs	r1, r2, #16
 800044e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000452:	fb08 f904 	mul.w	r9, r8, r4
 8000456:	40b0      	lsls	r0, r6
 8000458:	4589      	cmp	r9, r1
 800045a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800045e:	b280      	uxth	r0, r0
 8000460:	d93e      	bls.n	80004e0 <__udivmoddi4+0x2e8>
 8000462:	1879      	adds	r1, r7, r1
 8000464:	f108 3cff 	add.w	ip, r8, #4294967295
 8000468:	d201      	bcs.n	800046e <__udivmoddi4+0x276>
 800046a:	4589      	cmp	r9, r1
 800046c:	d81f      	bhi.n	80004ae <__udivmoddi4+0x2b6>
 800046e:	eba1 0109 	sub.w	r1, r1, r9
 8000472:	fbb1 f9fe 	udiv	r9, r1, lr
 8000476:	fb09 f804 	mul.w	r8, r9, r4
 800047a:	fb0e 1119 	mls	r1, lr, r9, r1
 800047e:	b292      	uxth	r2, r2
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	4542      	cmp	r2, r8
 8000486:	d229      	bcs.n	80004dc <__udivmoddi4+0x2e4>
 8000488:	18ba      	adds	r2, r7, r2
 800048a:	f109 31ff 	add.w	r1, r9, #4294967295
 800048e:	d2c4      	bcs.n	800041a <__udivmoddi4+0x222>
 8000490:	4542      	cmp	r2, r8
 8000492:	d2c2      	bcs.n	800041a <__udivmoddi4+0x222>
 8000494:	f1a9 0102 	sub.w	r1, r9, #2
 8000498:	443a      	add	r2, r7
 800049a:	e7be      	b.n	800041a <__udivmoddi4+0x222>
 800049c:	45f0      	cmp	r8, lr
 800049e:	d29d      	bcs.n	80003dc <__udivmoddi4+0x1e4>
 80004a0:	ebbe 0302 	subs.w	r3, lr, r2
 80004a4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004a8:	3801      	subs	r0, #1
 80004aa:	46e1      	mov	r9, ip
 80004ac:	e796      	b.n	80003dc <__udivmoddi4+0x1e4>
 80004ae:	eba7 0909 	sub.w	r9, r7, r9
 80004b2:	4449      	add	r1, r9
 80004b4:	f1a8 0c02 	sub.w	ip, r8, #2
 80004b8:	fbb1 f9fe 	udiv	r9, r1, lr
 80004bc:	fb09 f804 	mul.w	r8, r9, r4
 80004c0:	e7db      	b.n	800047a <__udivmoddi4+0x282>
 80004c2:	4673      	mov	r3, lr
 80004c4:	e77f      	b.n	80003c6 <__udivmoddi4+0x1ce>
 80004c6:	4650      	mov	r0, sl
 80004c8:	e766      	b.n	8000398 <__udivmoddi4+0x1a0>
 80004ca:	4608      	mov	r0, r1
 80004cc:	e6fd      	b.n	80002ca <__udivmoddi4+0xd2>
 80004ce:	443b      	add	r3, r7
 80004d0:	3a02      	subs	r2, #2
 80004d2:	e733      	b.n	800033c <__udivmoddi4+0x144>
 80004d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d8:	443b      	add	r3, r7
 80004da:	e71c      	b.n	8000316 <__udivmoddi4+0x11e>
 80004dc:	4649      	mov	r1, r9
 80004de:	e79c      	b.n	800041a <__udivmoddi4+0x222>
 80004e0:	eba1 0109 	sub.w	r1, r1, r9
 80004e4:	46c4      	mov	ip, r8
 80004e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004ea:	fb09 f804 	mul.w	r8, r9, r4
 80004ee:	e7c4      	b.n	800047a <__udivmoddi4+0x282>

080004f0 <__aeabi_idiv0>:
 80004f0:	4770      	bx	lr
 80004f2:	bf00      	nop

080004f4 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b08e      	sub	sp, #56	@ 0x38
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80004fa:	f107 031c 	add.w	r3, r7, #28
 80004fe:	2200      	movs	r2, #0
 8000500:	601a      	str	r2, [r3, #0]
 8000502:	605a      	str	r2, [r3, #4]
 8000504:	609a      	str	r2, [r3, #8]
 8000506:	60da      	str	r2, [r3, #12]
 8000508:	611a      	str	r2, [r3, #16]
 800050a:	615a      	str	r2, [r3, #20]
 800050c:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 800050e:	463b      	mov	r3, r7
 8000510:	2200      	movs	r2, #0
 8000512:	601a      	str	r2, [r3, #0]
 8000514:	605a      	str	r2, [r3, #4]
 8000516:	609a      	str	r2, [r3, #8]
 8000518:	60da      	str	r2, [r3, #12]
 800051a:	611a      	str	r2, [r3, #16]
 800051c:	615a      	str	r2, [r3, #20]
 800051e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8000520:	4b2f      	ldr	r3, [pc, #188]	@ (80005e0 <MX_FSMC_Init+0xec>)
 8000522:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8000526:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8000528:	4b2d      	ldr	r3, [pc, #180]	@ (80005e0 <MX_FSMC_Init+0xec>)
 800052a:	4a2e      	ldr	r2, [pc, #184]	@ (80005e4 <MX_FSMC_Init+0xf0>)
 800052c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800052e:	4b2c      	ldr	r3, [pc, #176]	@ (80005e0 <MX_FSMC_Init+0xec>)
 8000530:	2200      	movs	r2, #0
 8000532:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8000534:	4b2a      	ldr	r3, [pc, #168]	@ (80005e0 <MX_FSMC_Init+0xec>)
 8000536:	2200      	movs	r2, #0
 8000538:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800053a:	4b29      	ldr	r3, [pc, #164]	@ (80005e0 <MX_FSMC_Init+0xec>)
 800053c:	2200      	movs	r2, #0
 800053e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8000540:	4b27      	ldr	r3, [pc, #156]	@ (80005e0 <MX_FSMC_Init+0xec>)
 8000542:	2210      	movs	r2, #16
 8000544:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8000546:	4b26      	ldr	r3, [pc, #152]	@ (80005e0 <MX_FSMC_Init+0xec>)
 8000548:	2200      	movs	r2, #0
 800054a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800054c:	4b24      	ldr	r3, [pc, #144]	@ (80005e0 <MX_FSMC_Init+0xec>)
 800054e:	2200      	movs	r2, #0
 8000550:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8000552:	4b23      	ldr	r3, [pc, #140]	@ (80005e0 <MX_FSMC_Init+0xec>)
 8000554:	2200      	movs	r2, #0
 8000556:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8000558:	4b21      	ldr	r3, [pc, #132]	@ (80005e0 <MX_FSMC_Init+0xec>)
 800055a:	2200      	movs	r2, #0
 800055c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800055e:	4b20      	ldr	r3, [pc, #128]	@ (80005e0 <MX_FSMC_Init+0xec>)
 8000560:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000564:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8000566:	4b1e      	ldr	r3, [pc, #120]	@ (80005e0 <MX_FSMC_Init+0xec>)
 8000568:	2200      	movs	r2, #0
 800056a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 800056c:	4b1c      	ldr	r3, [pc, #112]	@ (80005e0 <MX_FSMC_Init+0xec>)
 800056e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000572:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8000574:	4b1a      	ldr	r3, [pc, #104]	@ (80005e0 <MX_FSMC_Init+0xec>)
 8000576:	2200      	movs	r2, #0
 8000578:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 800057a:	4b19      	ldr	r3, [pc, #100]	@ (80005e0 <MX_FSMC_Init+0xec>)
 800057c:	2200      	movs	r2, #0
 800057e:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8000580:	4b17      	ldr	r3, [pc, #92]	@ (80005e0 <MX_FSMC_Init+0xec>)
 8000582:	2200      	movs	r2, #0
 8000584:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 8000586:	230f      	movs	r3, #15
 8000588:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 800058a:	230f      	movs	r3, #15
 800058c:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 800058e:	233c      	movs	r3, #60	@ 0x3c
 8000590:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 8000592:	2300      	movs	r3, #0
 8000594:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 8000596:	2310      	movs	r3, #16
 8000598:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 800059a:	2311      	movs	r3, #17
 800059c:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800059e:	2300      	movs	r3, #0
 80005a0:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 80005a2:	2308      	movs	r3, #8
 80005a4:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 80005a6:	230f      	movs	r3, #15
 80005a8:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 80005aa:	2309      	movs	r3, #9
 80005ac:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 15;
 80005ae:	230f      	movs	r3, #15
 80005b0:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 80005b2:	2310      	movs	r3, #16
 80005b4:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 80005b6:	2311      	movs	r3, #17
 80005b8:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 80005ba:	2300      	movs	r3, #0
 80005bc:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 80005be:	463a      	mov	r2, r7
 80005c0:	f107 031c 	add.w	r3, r7, #28
 80005c4:	4619      	mov	r1, r3
 80005c6:	4806      	ldr	r0, [pc, #24]	@ (80005e0 <MX_FSMC_Init+0xec>)
 80005c8:	f002 f830 	bl	800262c <HAL_SRAM_Init>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 80005d2:	f000 fb1f 	bl	8000c14 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80005d6:	bf00      	nop
 80005d8:	3738      	adds	r7, #56	@ 0x38
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000038 	.word	0x20000038
 80005e4:	a0000104 	.word	0xa0000104

080005e8 <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ee:	1d3b      	adds	r3, r7, #4
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80005fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000670 <HAL_FSMC_MspInit+0x88>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d131      	bne.n	8000668 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8000604:	4b1a      	ldr	r3, [pc, #104]	@ (8000670 <HAL_FSMC_MspInit+0x88>)
 8000606:	2201      	movs	r2, #1
 8000608:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	603b      	str	r3, [r7, #0]
 800060e:	4b19      	ldr	r3, [pc, #100]	@ (8000674 <HAL_FSMC_MspInit+0x8c>)
 8000610:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000612:	4a18      	ldr	r2, [pc, #96]	@ (8000674 <HAL_FSMC_MspInit+0x8c>)
 8000614:	f043 0301 	orr.w	r3, r3, #1
 8000618:	6393      	str	r3, [r2, #56]	@ 0x38
 800061a:	4b16      	ldr	r3, [pc, #88]	@ (8000674 <HAL_FSMC_MspInit+0x8c>)
 800061c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	603b      	str	r3, [r7, #0]
 8000624:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 8000626:	f64f 7388 	movw	r3, #65416	@ 0xff88
 800062a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800062c:	2302      	movs	r3, #2
 800062e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000630:	2300      	movs	r3, #0
 8000632:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000634:	2303      	movs	r3, #3
 8000636:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000638:	230c      	movs	r3, #12
 800063a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	4619      	mov	r1, r3
 8000640:	480d      	ldr	r0, [pc, #52]	@ (8000678 <HAL_FSMC_MspInit+0x90>)
 8000642:	f000 ff2f 	bl	80014a4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 8000646:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 800064a:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800064c:	2302      	movs	r3, #2
 800064e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000650:	2300      	movs	r3, #0
 8000652:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000654:	2303      	movs	r3, #3
 8000656:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8000658:	230c      	movs	r3, #12
 800065a:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800065c:	1d3b      	adds	r3, r7, #4
 800065e:	4619      	mov	r1, r3
 8000660:	4806      	ldr	r0, [pc, #24]	@ (800067c <HAL_FSMC_MspInit+0x94>)
 8000662:	f000 ff1f 	bl	80014a4 <HAL_GPIO_Init>
 8000666:	e000      	b.n	800066a <HAL_FSMC_MspInit+0x82>
    return;
 8000668:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800066a:	3718      	adds	r7, #24
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	20000088 	.word	0x20000088
 8000674:	40023800 	.word	0x40023800
 8000678:	40021000 	.word	0x40021000
 800067c:	40020c00 	.word	0x40020c00

08000680 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8000688:	f7ff ffae 	bl	80005e8 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800068c:	bf00      	nop
 800068e:	3708      	adds	r7, #8
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}

08000694 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08c      	sub	sp, #48	@ 0x30
 8000698:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	f107 031c 	add.w	r3, r7, #28
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006aa:	2300      	movs	r3, #0
 80006ac:	61bb      	str	r3, [r7, #24]
 80006ae:	4b6f      	ldr	r3, [pc, #444]	@ (800086c <MX_GPIO_Init+0x1d8>)
 80006b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006b2:	4a6e      	ldr	r2, [pc, #440]	@ (800086c <MX_GPIO_Init+0x1d8>)
 80006b4:	f043 0310 	orr.w	r3, r3, #16
 80006b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006ba:	4b6c      	ldr	r3, [pc, #432]	@ (800086c <MX_GPIO_Init+0x1d8>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	f003 0310 	and.w	r3, r3, #16
 80006c2:	61bb      	str	r3, [r7, #24]
 80006c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c6:	2300      	movs	r3, #0
 80006c8:	617b      	str	r3, [r7, #20]
 80006ca:	4b68      	ldr	r3, [pc, #416]	@ (800086c <MX_GPIO_Init+0x1d8>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ce:	4a67      	ldr	r2, [pc, #412]	@ (800086c <MX_GPIO_Init+0x1d8>)
 80006d0:	f043 0304 	orr.w	r3, r3, #4
 80006d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006d6:	4b65      	ldr	r3, [pc, #404]	@ (800086c <MX_GPIO_Init+0x1d8>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	f003 0304 	and.w	r3, r3, #4
 80006de:	617b      	str	r3, [r7, #20]
 80006e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
 80006e6:	4b61      	ldr	r3, [pc, #388]	@ (800086c <MX_GPIO_Init+0x1d8>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	4a60      	ldr	r2, [pc, #384]	@ (800086c <MX_GPIO_Init+0x1d8>)
 80006ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f2:	4b5e      	ldr	r3, [pc, #376]	@ (800086c <MX_GPIO_Init+0x1d8>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	4b5a      	ldr	r3, [pc, #360]	@ (800086c <MX_GPIO_Init+0x1d8>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	4a59      	ldr	r2, [pc, #356]	@ (800086c <MX_GPIO_Init+0x1d8>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6313      	str	r3, [r2, #48]	@ 0x30
 800070e:	4b57      	ldr	r3, [pc, #348]	@ (800086c <MX_GPIO_Init+0x1d8>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	4b53      	ldr	r3, [pc, #332]	@ (800086c <MX_GPIO_Init+0x1d8>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	4a52      	ldr	r2, [pc, #328]	@ (800086c <MX_GPIO_Init+0x1d8>)
 8000724:	f043 0308 	orr.w	r3, r3, #8
 8000728:	6313      	str	r3, [r2, #48]	@ 0x30
 800072a:	4b50      	ldr	r3, [pc, #320]	@ (800086c <MX_GPIO_Init+0x1d8>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	f003 0308 	and.w	r3, r3, #8
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	4b4c      	ldr	r3, [pc, #304]	@ (800086c <MX_GPIO_Init+0x1d8>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	4a4b      	ldr	r2, [pc, #300]	@ (800086c <MX_GPIO_Init+0x1d8>)
 8000740:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000744:	6313      	str	r3, [r2, #48]	@ 0x30
 8000746:	4b49      	ldr	r3, [pc, #292]	@ (800086c <MX_GPIO_Init+0x1d8>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000752:	2300      	movs	r3, #0
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	4b45      	ldr	r3, [pc, #276]	@ (800086c <MX_GPIO_Init+0x1d8>)
 8000758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800075a:	4a44      	ldr	r2, [pc, #272]	@ (800086c <MX_GPIO_Init+0x1d8>)
 800075c:	f043 0302 	orr.w	r3, r3, #2
 8000760:	6313      	str	r3, [r2, #48]	@ 0x30
 8000762:	4b42      	ldr	r3, [pc, #264]	@ (800086c <MX_GPIO_Init+0x1d8>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000766:	f003 0302 	and.w	r3, r3, #2
 800076a:	603b      	str	r3, [r7, #0]
 800076c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin, GPIO_PIN_RESET);
 800076e:	2200      	movs	r2, #0
 8000770:	2170      	movs	r1, #112	@ 0x70
 8000772:	483f      	ldr	r0, [pc, #252]	@ (8000870 <MX_GPIO_Init+0x1dc>)
 8000774:	f001 f832 	bl	80017dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000778:	2200      	movs	r2, #0
 800077a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800077e:	483d      	ldr	r0, [pc, #244]	@ (8000874 <MX_GPIO_Init+0x1e0>)
 8000780:	f001 f82c 	bl	80017dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 8000784:	2200      	movs	r2, #0
 8000786:	2140      	movs	r1, #64	@ 0x40
 8000788:	483b      	ldr	r0, [pc, #236]	@ (8000878 <MX_GPIO_Init+0x1e4>)
 800078a:	f001 f827 	bl	80017dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 800078e:	2200      	movs	r2, #0
 8000790:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000794:	4839      	ldr	r0, [pc, #228]	@ (800087c <MX_GPIO_Init+0x1e8>)
 8000796:	f001 f821 	bl	80017dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 800079a:	2200      	movs	r2, #0
 800079c:	2108      	movs	r1, #8
 800079e:	4838      	ldr	r0, [pc, #224]	@ (8000880 <MX_GPIO_Init+0x1ec>)
 80007a0:	f001 f81c 	bl	80017dc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DEBUG_LED_Pin OUTPUT_Y0_Pin OUTPUT_Y1_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin|OUTPUT_Y0_Pin|OUTPUT_Y1_Pin;
 80007a4:	2370      	movs	r3, #112	@ 0x70
 80007a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a8:	2301      	movs	r3, #1
 80007aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	2300      	movs	r3, #0
 80007ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b0:	2300      	movs	r3, #0
 80007b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80007b4:	f107 031c 	add.w	r3, r7, #28
 80007b8:	4619      	mov	r1, r3
 80007ba:	482d      	ldr	r0, [pc, #180]	@ (8000870 <MX_GPIO_Init+0x1dc>)
 80007bc:	f000 fe72 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : FSMC_RES_Pin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 80007c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80007c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c6:	2301      	movs	r3, #1
 80007c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 80007d2:	f107 031c 	add.w	r3, r7, #28
 80007d6:	4619      	mov	r1, r3
 80007d8:	4826      	ldr	r0, [pc, #152]	@ (8000874 <MX_GPIO_Init+0x1e0>)
 80007da:	f000 fe63 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT_X0_Pin INPUT_X1_Pin */
  GPIO_InitStruct.Pin = INPUT_X0_Pin|INPUT_X1_Pin;
 80007de:	23c0      	movs	r3, #192	@ 0xc0
 80007e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e2:	2300      	movs	r3, #0
 80007e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	4619      	mov	r1, r3
 80007f0:	4822      	ldr	r0, [pc, #136]	@ (800087c <MX_GPIO_Init+0x1e8>)
 80007f2:	f000 fe57 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : INPUT_X2_Pin PC5 */
  GPIO_InitStruct.Pin = INPUT_X2_Pin|GPIO_PIN_5;
 80007f6:	2330      	movs	r3, #48	@ 0x30
 80007f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007fa:	2300      	movs	r3, #0
 80007fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	4619      	mov	r1, r3
 8000808:	481a      	ldr	r0, [pc, #104]	@ (8000874 <MX_GPIO_Init+0x1e0>)
 800080a:	f000 fe4b 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD_LATCH_Pin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 800080e:	2340      	movs	r3, #64	@ 0x40
 8000810:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000812:	2301      	movs	r3, #1
 8000814:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	2300      	movs	r3, #0
 8000818:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081a:	2300      	movs	r3, #0
 800081c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 031c 	add.w	r3, r7, #28
 8000822:	4619      	mov	r1, r3
 8000824:	4814      	ldr	r0, [pc, #80]	@ (8000878 <MX_GPIO_Init+0x1e4>)
 8000826:	f000 fe3d 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : FSMC_BLK_Pin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 800082a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800082e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000830:	2301      	movs	r3, #1
 8000832:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2300      	movs	r3, #0
 800083a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 800083c:	f107 031c 	add.w	r3, r7, #28
 8000840:	4619      	mov	r1, r3
 8000842:	480e      	ldr	r0, [pc, #56]	@ (800087c <MX_GPIO_Init+0x1e8>)
 8000844:	f000 fe2e 	bl	80014a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_LOAD_Pin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 8000848:	2308      	movs	r3, #8
 800084a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800084c:	2301      	movs	r3, #1
 800084e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2300      	movs	r3, #0
 8000856:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	4619      	mov	r1, r3
 800085e:	4808      	ldr	r0, [pc, #32]	@ (8000880 <MX_GPIO_Init+0x1ec>)
 8000860:	f000 fe20 	bl	80014a4 <HAL_GPIO_Init>

}
 8000864:	bf00      	nop
 8000866:	3730      	adds	r7, #48	@ 0x30
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40023800 	.word	0x40023800
 8000870:	40021000 	.word	0x40021000
 8000874:	40020800 	.word	0x40020800
 8000878:	40021800 	.word	0x40021800
 800087c:	40020000 	.word	0x40020000
 8000880:	40020c00 	.word	0x40020c00

08000884 <initLab2Bai5>:
	doTask();
}

/* Lab2Bai5 */
void initLab2Bai5(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
	timer2Init();
 8000888:	f000 f9ca 	bl	8000c20 <timer2Init>
	initTime(13, 0);
 800088c:	2100      	movs	r1, #0
 800088e:	200d      	movs	r0, #13
 8000890:	f000 f8f0 	bl	8000a74 <initTime>
	timerInit(0, 5, 5, led7segDisplay);
 8000894:	4b07      	ldr	r3, [pc, #28]	@ (80008b4 <initLab2Bai5+0x30>)
 8000896:	2205      	movs	r2, #5
 8000898:	2105      	movs	r1, #5
 800089a:	2000      	movs	r0, #0
 800089c:	f000 f9ca 	bl	8000c34 <timerInit>
	timerInit(1, 1000, 1000, shiftRightLed7); // shift right each second
 80008a0:	4b05      	ldr	r3, [pc, #20]	@ (80008b8 <initLab2Bai5+0x34>)
 80008a2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80008a6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80008aa:	2001      	movs	r0, #1
 80008ac:	f000 f9c2 	bl	8000c34 <timerInit>
}
 80008b0:	bf00      	nop
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	080008c9 	.word	0x080008c9
 80008b8:	08000a2d 	.word	0x08000a2d

080008bc <runLab2Bai5>:
void runLab2Bai5(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	doTask();
 80008c0:	f000 f9fe 	bl	8000cc0 <doTask>
 80008c4:	bf00      	nop
 80008c6:	bd80      	pop	{r7, pc}

080008c8 <led7segDisplay>:
 * @param	None
 * @note	Call in 1ms interrupt
 * @retval 	None
 */
void led7segDisplay()
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	spiBuffer &= 0x00ff;
 80008cc:	4b40      	ldr	r3, [pc, #256]	@ (80009d0 <led7segDisplay+0x108>)
 80008ce:	881b      	ldrh	r3, [r3, #0]
 80008d0:	b2db      	uxtb	r3, r3
 80008d2:	b29a      	uxth	r2, r3
 80008d4:	4b3e      	ldr	r3, [pc, #248]	@ (80009d0 <led7segDisplay+0x108>)
 80008d6:	801a      	strh	r2, [r3, #0]
	spiBuffer |= led7seg[led7segInx] << 8; // shift left map 8bit then or it spibffer= 0xLLFF with LL is value of map
 80008d8:	4b3e      	ldr	r3, [pc, #248]	@ (80009d4 <led7segDisplay+0x10c>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	461a      	mov	r2, r3
 80008de:	4b3e      	ldr	r3, [pc, #248]	@ (80009d8 <led7segDisplay+0x110>)
 80008e0:	5c9b      	ldrb	r3, [r3, r2]
 80008e2:	b21b      	sxth	r3, r3
 80008e4:	021b      	lsls	r3, r3, #8
 80008e6:	b21a      	sxth	r2, r3
 80008e8:	4b39      	ldr	r3, [pc, #228]	@ (80009d0 <led7segDisplay+0x108>)
 80008ea:	881b      	ldrh	r3, [r3, #0]
 80008ec:	b21b      	sxth	r3, r3
 80008ee:	4313      	orrs	r3, r2
 80008f0:	b21b      	sxth	r3, r3
 80008f2:	b29a      	uxth	r2, r3
 80008f4:	4b36      	ldr	r3, [pc, #216]	@ (80009d0 <led7segDisplay+0x108>)
 80008f6:	801a      	strh	r2, [r3, #0]
	  (1101) = 0xd -> LED2
	  (1110) = 0xe -> LED3
	  (0111) = 0x7 -> LED4
	 */

	switch (led7segInx)
 80008f8:	4b36      	ldr	r3, [pc, #216]	@ (80009d4 <led7segDisplay+0x10c>)
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	2b03      	cmp	r3, #3
 80008fe:	d847      	bhi.n	8000990 <led7segDisplay+0xc8>
 8000900:	a201      	add	r2, pc, #4	@ (adr r2, 8000908 <led7segDisplay+0x40>)
 8000902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000906:	bf00      	nop
 8000908:	08000919 	.word	0x08000919
 800090c:	08000937 	.word	0x08000937
 8000910:	08000955 	.word	0x08000955
 8000914:	08000973 	.word	0x08000973
	{
	case 0:
		spiBuffer |= 0x00b0;
 8000918:	4b2d      	ldr	r3, [pc, #180]	@ (80009d0 <led7segDisplay+0x108>)
 800091a:	881b      	ldrh	r3, [r3, #0]
 800091c:	f043 03b0 	orr.w	r3, r3, #176	@ 0xb0
 8000920:	b29a      	uxth	r2, r3
 8000922:	4b2b      	ldr	r3, [pc, #172]	@ (80009d0 <led7segDisplay+0x108>)
 8000924:	801a      	strh	r2, [r3, #0]
		spiBuffer &= 0xffbf;
 8000926:	4b2a      	ldr	r3, [pc, #168]	@ (80009d0 <led7segDisplay+0x108>)
 8000928:	881b      	ldrh	r3, [r3, #0]
 800092a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800092e:	b29a      	uxth	r2, r3
 8000930:	4b27      	ldr	r3, [pc, #156]	@ (80009d0 <led7segDisplay+0x108>)
 8000932:	801a      	strh	r2, [r3, #0]
		break;
 8000934:	e02d      	b.n	8000992 <led7segDisplay+0xca>
	case 1:
		spiBuffer |= 0x00d0;
 8000936:	4b26      	ldr	r3, [pc, #152]	@ (80009d0 <led7segDisplay+0x108>)
 8000938:	881b      	ldrh	r3, [r3, #0]
 800093a:	f043 03d0 	orr.w	r3, r3, #208	@ 0xd0
 800093e:	b29a      	uxth	r2, r3
 8000940:	4b23      	ldr	r3, [pc, #140]	@ (80009d0 <led7segDisplay+0x108>)
 8000942:	801a      	strh	r2, [r3, #0]
		spiBuffer &= 0xffdf;
 8000944:	4b22      	ldr	r3, [pc, #136]	@ (80009d0 <led7segDisplay+0x108>)
 8000946:	881b      	ldrh	r3, [r3, #0]
 8000948:	f023 0320 	bic.w	r3, r3, #32
 800094c:	b29a      	uxth	r2, r3
 800094e:	4b20      	ldr	r3, [pc, #128]	@ (80009d0 <led7segDisplay+0x108>)
 8000950:	801a      	strh	r2, [r3, #0]
		break;
 8000952:	e01e      	b.n	8000992 <led7segDisplay+0xca>
	case 2:
		spiBuffer |= 0x00e0;
 8000954:	4b1e      	ldr	r3, [pc, #120]	@ (80009d0 <led7segDisplay+0x108>)
 8000956:	881b      	ldrh	r3, [r3, #0]
 8000958:	f043 03e0 	orr.w	r3, r3, #224	@ 0xe0
 800095c:	b29a      	uxth	r2, r3
 800095e:	4b1c      	ldr	r3, [pc, #112]	@ (80009d0 <led7segDisplay+0x108>)
 8000960:	801a      	strh	r2, [r3, #0]
		spiBuffer &= 0xffef;
 8000962:	4b1b      	ldr	r3, [pc, #108]	@ (80009d0 <led7segDisplay+0x108>)
 8000964:	881b      	ldrh	r3, [r3, #0]
 8000966:	f023 0310 	bic.w	r3, r3, #16
 800096a:	b29a      	uxth	r2, r3
 800096c:	4b18      	ldr	r3, [pc, #96]	@ (80009d0 <led7segDisplay+0x108>)
 800096e:	801a      	strh	r2, [r3, #0]
		break;
 8000970:	e00f      	b.n	8000992 <led7segDisplay+0xca>
	case 3:
		spiBuffer |= 0x0070;
 8000972:	4b17      	ldr	r3, [pc, #92]	@ (80009d0 <led7segDisplay+0x108>)
 8000974:	881b      	ldrh	r3, [r3, #0]
 8000976:	f043 0370 	orr.w	r3, r3, #112	@ 0x70
 800097a:	b29a      	uxth	r2, r3
 800097c:	4b14      	ldr	r3, [pc, #80]	@ (80009d0 <led7segDisplay+0x108>)
 800097e:	801a      	strh	r2, [r3, #0]
		spiBuffer &= 0xff7f;
 8000980:	4b13      	ldr	r3, [pc, #76]	@ (80009d0 <led7segDisplay+0x108>)
 8000982:	881b      	ldrh	r3, [r3, #0]
 8000984:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000988:	b29a      	uxth	r2, r3
 800098a:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <led7segDisplay+0x108>)
 800098c:	801a      	strh	r2, [r3, #0]
		break;
 800098e:	e000      	b.n	8000992 <led7segDisplay+0xca>
	default:
		break;
 8000990:	bf00      	nop
	}
	led7segInx = (led7segInx + 1) % 4;
 8000992:	4b10      	ldr	r3, [pc, #64]	@ (80009d4 <led7segDisplay+0x10c>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	3301      	adds	r3, #1
 8000998:	425a      	negs	r2, r3
 800099a:	f003 0303 	and.w	r3, r3, #3
 800099e:	f002 0203 	and.w	r2, r2, #3
 80009a2:	bf58      	it	pl
 80009a4:	4253      	negpl	r3, r2
 80009a6:	b2da      	uxtb	r2, r3
 80009a8:	4b0a      	ldr	r3, [pc, #40]	@ (80009d4 <led7segDisplay+0x10c>)
 80009aa:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 0);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2140      	movs	r1, #64	@ 0x40
 80009b0:	480a      	ldr	r0, [pc, #40]	@ (80009dc <led7segDisplay+0x114>)
 80009b2:	f000 ff13 	bl	80017dc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, (void *)&spiBuffer, 2, 1);
 80009b6:	2301      	movs	r3, #1
 80009b8:	2202      	movs	r2, #2
 80009ba:	4905      	ldr	r1, [pc, #20]	@ (80009d0 <led7segDisplay+0x108>)
 80009bc:	4808      	ldr	r0, [pc, #32]	@ (80009e0 <led7segDisplay+0x118>)
 80009be:	f001 fc14 	bl	80021ea <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80009c2:	2201      	movs	r2, #1
 80009c4:	2140      	movs	r1, #64	@ 0x40
 80009c6:	4805      	ldr	r0, [pc, #20]	@ (80009dc <led7segDisplay+0x114>)
 80009c8:	f000 ff08 	bl	80017dc <HAL_GPIO_WritePin>
}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	2000008e 	.word	0x2000008e
 80009d4:	2000008c 	.word	0x2000008c
 80009d8:	20000000 	.word	0x20000000
 80009dc:	40021800 	.word	0x40021800
 80009e0:	200000d8 	.word	0x200000d8

080009e4 <led7segSetDigit>:
 * @param  	pos	The position displayed (index from 0)
 * @param  	show_dot Show dot in the led or not
 * @retval 	None
 */
void led7segSetDigit(int num, int position, uint8_t showDot)
{
 80009e4:	b480      	push	{r7}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	60f8      	str	r0, [r7, #12]
 80009ec:	60b9      	str	r1, [r7, #8]
 80009ee:	4613      	mov	r3, r2
 80009f0:	71fb      	strb	r3, [r7, #7]
	if (num >= 0 && num <= 9)
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	db0e      	blt.n	8000a16 <led7segSetDigit+0x32>
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	2b09      	cmp	r3, #9
 80009fc:	dc0b      	bgt.n	8000a16 <led7segSetDigit+0x32>
	{
		led7seg[position] = led7segMap[num] - showDot;
 80009fe:	4a09      	ldr	r2, [pc, #36]	@ (8000a24 <led7segSetDigit+0x40>)
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	4413      	add	r3, r2
 8000a04:	781a      	ldrb	r2, [r3, #0]
 8000a06:	79fb      	ldrb	r3, [r7, #7]
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	b2d9      	uxtb	r1, r3
 8000a0c:	4a06      	ldr	r2, [pc, #24]	@ (8000a28 <led7segSetDigit+0x44>)
 8000a0e:	68bb      	ldr	r3, [r7, #8]
 8000a10:	4413      	add	r3, r2
 8000a12:	460a      	mov	r2, r1
 8000a14:	701a      	strb	r2, [r3, #0]
	}
}
 8000a16:	bf00      	nop
 8000a18:	3714      	adds	r7, #20
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	20000004 	.word	0x20000004
 8000a28:	20000000 	.word	0x20000000

08000a2c <shiftRightLed7>:
}
/**
 * @brief   Shift Right the number displayed on led 7-segment
 */
void shiftRightLed7()
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
	uint8_t temp = led7seg[3];
 8000a32:	4b0f      	ldr	r3, [pc, #60]	@ (8000a70 <shiftRightLed7+0x44>)
 8000a34:	78db      	ldrb	r3, [r3, #3]
 8000a36:	70fb      	strb	r3, [r7, #3]
	for (int i = 3; i > 0; i--)
 8000a38:	2303      	movs	r3, #3
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	e00b      	b.n	8000a56 <shiftRightLed7+0x2a>
	{
		led7seg[i] = led7seg[i - 1];
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	3b01      	subs	r3, #1
 8000a42:	4a0b      	ldr	r2, [pc, #44]	@ (8000a70 <shiftRightLed7+0x44>)
 8000a44:	5cd1      	ldrb	r1, [r2, r3]
 8000a46:	4a0a      	ldr	r2, [pc, #40]	@ (8000a70 <shiftRightLed7+0x44>)
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	460a      	mov	r2, r1
 8000a4e:	701a      	strb	r2, [r3, #0]
	for (int i = 3; i > 0; i--)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	3b01      	subs	r3, #1
 8000a54:	607b      	str	r3, [r7, #4]
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	dcf0      	bgt.n	8000a3e <shiftRightLed7+0x12>
	}
	led7seg[0] = temp;
 8000a5c:	4a04      	ldr	r2, [pc, #16]	@ (8000a70 <shiftRightLed7+0x44>)
 8000a5e:	78fb      	ldrb	r3, [r7, #3]
 8000a60:	7013      	strb	r3, [r2, #0]
}
 8000a62:	bf00      	nop
 8000a64:	370c      	adds	r7, #12
 8000a66:	46bd      	mov	sp, r7
 8000a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	20000000 	.word	0x20000000

08000a74 <initTime>:
void initTime(uint8_t h, uint8_t m)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	460a      	mov	r2, r1
 8000a7e:	71fb      	strb	r3, [r7, #7]
 8000a80:	4613      	mov	r3, r2
 8000a82:	71bb      	strb	r3, [r7, #6]
	hour = h;
 8000a84:	4a21      	ldr	r2, [pc, #132]	@ (8000b0c <initTime+0x98>)
 8000a86:	79fb      	ldrb	r3, [r7, #7]
 8000a88:	7013      	strb	r3, [r2, #0]
	minute = m;
 8000a8a:	4a21      	ldr	r2, [pc, #132]	@ (8000b10 <initTime+0x9c>)
 8000a8c:	79bb      	ldrb	r3, [r7, #6]
 8000a8e:	7013      	strb	r3, [r2, #0]
	led7segSetDigit(hour / 10, 0, 0);
 8000a90:	4b1e      	ldr	r3, [pc, #120]	@ (8000b0c <initTime+0x98>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	4a1f      	ldr	r2, [pc, #124]	@ (8000b14 <initTime+0xa0>)
 8000a96:	fba2 2303 	umull	r2, r3, r2, r3
 8000a9a:	08db      	lsrs	r3, r3, #3
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2100      	movs	r1, #0
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff ff9e 	bl	80009e4 <led7segSetDigit>
	led7segSetDigit(hour % 10, 1, 0);
 8000aa8:	4b18      	ldr	r3, [pc, #96]	@ (8000b0c <initTime+0x98>)
 8000aaa:	781a      	ldrb	r2, [r3, #0]
 8000aac:	4b19      	ldr	r3, [pc, #100]	@ (8000b14 <initTime+0xa0>)
 8000aae:	fba3 1302 	umull	r1, r3, r3, r2
 8000ab2:	08d9      	lsrs	r1, r3, #3
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	009b      	lsls	r3, r3, #2
 8000ab8:	440b      	add	r3, r1
 8000aba:	005b      	lsls	r3, r3, #1
 8000abc:	1ad3      	subs	r3, r2, r3
 8000abe:	b2db      	uxtb	r3, r3
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f7ff ff8d 	bl	80009e4 <led7segSetDigit>
	led7segSetDigit(minute / 10, 2, 0);
 8000aca:	4b11      	ldr	r3, [pc, #68]	@ (8000b10 <initTime+0x9c>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	4a11      	ldr	r2, [pc, #68]	@ (8000b14 <initTime+0xa0>)
 8000ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad4:	08db      	lsrs	r3, r3, #3
 8000ad6:	b2db      	uxtb	r3, r3
 8000ad8:	2200      	movs	r2, #0
 8000ada:	2102      	movs	r1, #2
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff ff81 	bl	80009e4 <led7segSetDigit>
	led7segSetDigit(minute % 10, 3, 0);
 8000ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8000b10 <initTime+0x9c>)
 8000ae4:	781a      	ldrb	r2, [r3, #0]
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8000b14 <initTime+0xa0>)
 8000ae8:	fba3 1302 	umull	r1, r3, r3, r2
 8000aec:	08d9      	lsrs	r1, r3, #3
 8000aee:	460b      	mov	r3, r1
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	440b      	add	r3, r1
 8000af4:	005b      	lsls	r3, r3, #1
 8000af6:	1ad3      	subs	r3, r2, r3
 8000af8:	b2db      	uxtb	r3, r3
 8000afa:	2200      	movs	r2, #0
 8000afc:	2103      	movs	r1, #3
 8000afe:	4618      	mov	r0, r3
 8000b00:	f7ff ff70 	bl	80009e4 <led7segSetDigit>
}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000090 	.word	0x20000090
 8000b10:	20000091 	.word	0x20000091
 8000b14:	cccccccd 	.word	0xcccccccd

08000b18 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000b1c:	f000 fb3e 	bl	800119c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000b20:	f000 f80e 	bl	8000b40 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000b24:	f7ff fdb6 	bl	8000694 <MX_GPIO_Init>

	MX_SPI1_Init();
 8000b28:	f000 f9aa 	bl	8000e80 <MX_SPI1_Init>
	MX_TIM2_Init();
 8000b2c:	f000 fa9a 	bl	8001064 <MX_TIM2_Init>
	MX_FSMC_Init();
 8000b30:	f7ff fce0 	bl	80004f4 <MX_FSMC_Init>
//	test7Seg();
//	initEx3();
//
//	timerInit(0, 1000, 1000, fsmEx3);
//	timerInit(1, 2, 2, led7segDisplay);
	initLab2Bai5();
 8000b34:	f7ff fea6 	bl	8000884 <initLab2Bai5>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		runLab2Bai5();
 8000b38:	f7ff fec0 	bl	80008bc <runLab2Bai5>
 8000b3c:	e7fc      	b.n	8000b38 <main+0x20>
	...

08000b40 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b094      	sub	sp, #80	@ 0x50
 8000b44:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000b46:	f107 0320 	add.w	r3, r7, #32
 8000b4a:	2230      	movs	r2, #48	@ 0x30
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f002 faf4 	bl	800313c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000b54:	f107 030c 	add.w	r3, r7, #12
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000b64:	2300      	movs	r3, #0
 8000b66:	60bb      	str	r3, [r7, #8]
 8000b68:	4b28      	ldr	r3, [pc, #160]	@ (8000c0c <SystemClock_Config+0xcc>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6c:	4a27      	ldr	r2, [pc, #156]	@ (8000c0c <SystemClock_Config+0xcc>)
 8000b6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b72:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b74:	4b25      	ldr	r3, [pc, #148]	@ (8000c0c <SystemClock_Config+0xcc>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b80:	2300      	movs	r3, #0
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	4b22      	ldr	r3, [pc, #136]	@ (8000c10 <SystemClock_Config+0xd0>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4a21      	ldr	r2, [pc, #132]	@ (8000c10 <SystemClock_Config+0xd0>)
 8000b8a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b8e:	6013      	str	r3, [r2, #0]
 8000b90:	4b1f      	ldr	r3, [pc, #124]	@ (8000c10 <SystemClock_Config+0xd0>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b9c:	2302      	movs	r3, #2
 8000b9e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ba4:	2310      	movs	r3, #16
 8000ba6:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bac:	2300      	movs	r3, #0
 8000bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000bb0:	2308      	movs	r3, #8
 8000bb2:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8000bb4:	23a8      	movs	r3, #168	@ 0xa8
 8000bb6:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bb8:	2302      	movs	r3, #2
 8000bba:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000bbc:	2304      	movs	r3, #4
 8000bbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000bc0:	f107 0320 	add.w	r3, r7, #32
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f000 fe23 	bl	8001810 <HAL_RCC_OscConfig>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <SystemClock_Config+0x94>
		Error_Handler();
 8000bd0:	f000 f820 	bl	8000c14 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000bd4:	230f      	movs	r3, #15
 8000bd6:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000be0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000be4:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8000be6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000bea:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000bec:	f107 030c 	add.w	r3, r7, #12
 8000bf0:	2105      	movs	r1, #5
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f001 f884 	bl	8001d00 <HAL_RCC_ClockConfig>
 8000bf8:	4603      	mov	r3, r0
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d001      	beq.n	8000c02 <SystemClock_Config+0xc2>
		Error_Handler();
 8000bfe:	f000 f809 	bl	8000c14 <Error_Handler>
	}
}
 8000c02:	bf00      	nop
 8000c04:	3750      	adds	r7, #80	@ 0x50
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40023800 	.word	0x40023800
 8000c10:	40007000 	.word	0x40007000

08000c14 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c18:	b672      	cpsid	i
}
 8000c1a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <Error_Handler+0x8>

08000c20 <timer2Init>:
 * @return None
 */
/*Function -----------------------------------------------------*/

void timer2Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8000c24:	4802      	ldr	r0, [pc, #8]	@ (8000c30 <timer2Init+0x10>)
 8000c26:	f001 fd99 	bl	800275c <HAL_TIM_Base_Start_IT>
}
 8000c2a:	bf00      	nop
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000130 	.word	0x20000130

08000c34 <timerInit>:

/**
 * @brief	Init time
 * */
void timerInit(uint8_t index, uint16_t period, uint16_t counter, void (*callback)(void))
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	607b      	str	r3, [r7, #4]
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	73fb      	strb	r3, [r7, #15]
 8000c40:	460b      	mov	r3, r1
 8000c42:	81bb      	strh	r3, [r7, #12]
 8000c44:	4613      	mov	r3, r2
 8000c46:	817b      	strh	r3, [r7, #10]

	if (index < MAX_TASK && index >= 0)
 8000c48:	7bfb      	ldrb	r3, [r7, #15]
 8000c4a:	2b04      	cmp	r3, #4
 8000c4c:	d830      	bhi.n	8000cb0 <timerInit+0x7c>
	{
		task[index].period = period;
 8000c4e:	7bfa      	ldrb	r2, [r7, #15]
 8000c50:	491a      	ldr	r1, [pc, #104]	@ (8000cbc <timerInit+0x88>)
 8000c52:	4613      	mov	r3, r2
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	4413      	add	r3, r2
 8000c58:	009b      	lsls	r3, r3, #2
 8000c5a:	440b      	add	r3, r1
 8000c5c:	89ba      	ldrh	r2, [r7, #12]
 8000c5e:	801a      	strh	r2, [r3, #0]
		task[index].counter = counter;
 8000c60:	7bfa      	ldrb	r2, [r7, #15]
 8000c62:	4916      	ldr	r1, [pc, #88]	@ (8000cbc <timerInit+0x88>)
 8000c64:	4613      	mov	r3, r2
 8000c66:	005b      	lsls	r3, r3, #1
 8000c68:	4413      	add	r3, r2
 8000c6a:	009b      	lsls	r3, r3, #2
 8000c6c:	440b      	add	r3, r1
 8000c6e:	3302      	adds	r3, #2
 8000c70:	897a      	ldrh	r2, [r7, #10]
 8000c72:	801a      	strh	r2, [r3, #0]
		task[index].callback = callback;
 8000c74:	7bfa      	ldrb	r2, [r7, #15]
 8000c76:	4911      	ldr	r1, [pc, #68]	@ (8000cbc <timerInit+0x88>)
 8000c78:	4613      	mov	r3, r2
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	4413      	add	r3, r2
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	440b      	add	r3, r1
 8000c82:	3308      	adds	r3, #8
 8000c84:	687a      	ldr	r2, [r7, #4]
 8000c86:	601a      	str	r2, [r3, #0]
		task[index].active = 1;
 8000c88:	7bfa      	ldrb	r2, [r7, #15]
 8000c8a:	490c      	ldr	r1, [pc, #48]	@ (8000cbc <timerInit+0x88>)
 8000c8c:	4613      	mov	r3, r2
 8000c8e:	005b      	lsls	r3, r3, #1
 8000c90:	4413      	add	r3, r2
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	440b      	add	r3, r1
 8000c96:	3304      	adds	r3, #4
 8000c98:	2201      	movs	r2, #1
 8000c9a:	701a      	strb	r2, [r3, #0]
		task[index].flag = 0;
 8000c9c:	7bfa      	ldrb	r2, [r7, #15]
 8000c9e:	4907      	ldr	r1, [pc, #28]	@ (8000cbc <timerInit+0x88>)
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	4413      	add	r3, r2
 8000ca6:	009b      	lsls	r3, r3, #2
 8000ca8:	440b      	add	r3, r1
 8000caa:	3305      	adds	r3, #5
 8000cac:	2200      	movs	r2, #0
 8000cae:	701a      	strb	r2, [r3, #0]
	//	task0.period=period;
	//	task0.counter=counter;
	//	task0.callback=callback;
	//	task0.active=1;
	//	task0.flag=0;
}
 8000cb0:	bf00      	nop
 8000cb2:	3714      	adds	r7, #20
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	20000098 	.word	0x20000098

08000cc0 <doTask>:

/** @brief do task with flag
 * */
void doTask()
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
	if (globalFlag)
 8000cc6:	4b24      	ldr	r3, [pc, #144]	@ (8000d58 <doTask+0x98>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d03d      	beq.n	8000d4a <doTask+0x8a>
	{
		for (uint8_t i = 0; i < MAX_TASK; i++)
 8000cce:	2300      	movs	r3, #0
 8000cd0:	71fb      	strb	r3, [r7, #7]
 8000cd2:	e037      	b.n	8000d44 <doTask+0x84>
		{
			if (task[i].flag & task[i].active)
 8000cd4:	79fa      	ldrb	r2, [r7, #7]
 8000cd6:	4921      	ldr	r1, [pc, #132]	@ (8000d5c <doTask+0x9c>)
 8000cd8:	4613      	mov	r3, r2
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	4413      	add	r3, r2
 8000cde:	009b      	lsls	r3, r3, #2
 8000ce0:	440b      	add	r3, r1
 8000ce2:	3305      	adds	r3, #5
 8000ce4:	7819      	ldrb	r1, [r3, #0]
 8000ce6:	79fa      	ldrb	r2, [r7, #7]
 8000ce8:	481c      	ldr	r0, [pc, #112]	@ (8000d5c <doTask+0x9c>)
 8000cea:	4613      	mov	r3, r2
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	4413      	add	r3, r2
 8000cf0:	009b      	lsls	r3, r3, #2
 8000cf2:	4403      	add	r3, r0
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	400b      	ands	r3, r1
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d01e      	beq.n	8000d3e <doTask+0x7e>
			{
				if (task[i].callback != NULL)
 8000d00:	79fa      	ldrb	r2, [r7, #7]
 8000d02:	4916      	ldr	r1, [pc, #88]	@ (8000d5c <doTask+0x9c>)
 8000d04:	4613      	mov	r3, r2
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	4413      	add	r3, r2
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	440b      	add	r3, r1
 8000d0e:	3308      	adds	r3, #8
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d009      	beq.n	8000d2a <doTask+0x6a>
					task[i].callback();
 8000d16:	79fa      	ldrb	r2, [r7, #7]
 8000d18:	4910      	ldr	r1, [pc, #64]	@ (8000d5c <doTask+0x9c>)
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	4413      	add	r3, r2
 8000d20:	009b      	lsls	r3, r3, #2
 8000d22:	440b      	add	r3, r1
 8000d24:	3308      	adds	r3, #8
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4798      	blx	r3
				task[i].flag = 0;
 8000d2a:	79fa      	ldrb	r2, [r7, #7]
 8000d2c:	490b      	ldr	r1, [pc, #44]	@ (8000d5c <doTask+0x9c>)
 8000d2e:	4613      	mov	r3, r2
 8000d30:	005b      	lsls	r3, r3, #1
 8000d32:	4413      	add	r3, r2
 8000d34:	009b      	lsls	r3, r3, #2
 8000d36:	440b      	add	r3, r1
 8000d38:	3305      	adds	r3, #5
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < MAX_TASK; i++)
 8000d3e:	79fb      	ldrb	r3, [r7, #7]
 8000d40:	3301      	adds	r3, #1
 8000d42:	71fb      	strb	r3, [r7, #7]
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	2b04      	cmp	r3, #4
 8000d48:	d9c4      	bls.n	8000cd4 <doTask+0x14>
			}
		}
		//		task0.callback();
		//		task0.flag=0;
	}
	globalFlag = 0;
 8000d4a:	4b03      	ldr	r3, [pc, #12]	@ (8000d58 <doTask+0x98>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	701a      	strb	r2, [r3, #0]
}
 8000d50:	bf00      	nop
 8000d52:	3708      	adds	r7, #8
 8000d54:	46bd      	mov	sp, r7
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	200000d4 	.word	0x200000d4
 8000d5c:	20000098 	.word	0x20000098

08000d60 <HAL_TIM_PeriodElapsedCallback>:
 * @param  	htim TIM Base handle
 * @note	This callback function is called by default
 * @retval 	None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d70:	d175      	bne.n	8000e5e <HAL_TIM_PeriodElapsedCallback+0xfe>
	{
		if (timer2Count > 0)
 8000d72:	4b3e      	ldr	r3, [pc, #248]	@ (8000e6c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000d74:	881b      	ldrh	r3, [r3, #0]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d010      	beq.n	8000d9c <HAL_TIM_PeriodElapsedCallback+0x3c>
		{
			timer2Count--;
 8000d7a:	4b3c      	ldr	r3, [pc, #240]	@ (8000e6c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000d7c:	881b      	ldrh	r3, [r3, #0]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	4b3a      	ldr	r3, [pc, #232]	@ (8000e6c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000d84:	801a      	strh	r2, [r3, #0]
			if (timer2Count == 0)
 8000d86:	4b39      	ldr	r3, [pc, #228]	@ (8000e6c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000d88:	881b      	ldrh	r3, [r3, #0]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	d106      	bne.n	8000d9c <HAL_TIM_PeriodElapsedCallback+0x3c>
			{
				timer2Flag = 1;
 8000d8e:	4b38      	ldr	r3, [pc, #224]	@ (8000e70 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000d90:	2201      	movs	r2, #1
 8000d92:	701a      	strb	r2, [r3, #0]
				timer2Count = timer2Mul;
 8000d94:	4b37      	ldr	r3, [pc, #220]	@ (8000e74 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000d96:	881a      	ldrh	r2, [r3, #0]
 8000d98:	4b34      	ldr	r3, [pc, #208]	@ (8000e6c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8000d9a:	801a      	strh	r2, [r3, #0]
			}
		}
		for (uint8_t i = 0; i < MAX_TASK; i++)
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	73fb      	strb	r3, [r7, #15]
 8000da0:	e05a      	b.n	8000e58 <HAL_TIM_PeriodElapsedCallback+0xf8>
		{
			if (task[i].active == 0)
 8000da2:	7bfa      	ldrb	r2, [r7, #15]
 8000da4:	4934      	ldr	r1, [pc, #208]	@ (8000e78 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000da6:	4613      	mov	r3, r2
 8000da8:	005b      	lsls	r3, r3, #1
 8000daa:	4413      	add	r3, r2
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	440b      	add	r3, r1
 8000db0:	3304      	adds	r3, #4
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d04b      	beq.n	8000e50 <HAL_TIM_PeriodElapsedCallback+0xf0>
				continue;
			task[i].counter -= 1;
 8000db8:	7bfa      	ldrb	r2, [r7, #15]
 8000dba:	492f      	ldr	r1, [pc, #188]	@ (8000e78 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	005b      	lsls	r3, r3, #1
 8000dc0:	4413      	add	r3, r2
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	440b      	add	r3, r1
 8000dc6:	3302      	adds	r3, #2
 8000dc8:	881b      	ldrh	r3, [r3, #0]
 8000dca:	7bfa      	ldrb	r2, [r7, #15]
 8000dcc:	3b01      	subs	r3, #1
 8000dce:	b298      	uxth	r0, r3
 8000dd0:	4929      	ldr	r1, [pc, #164]	@ (8000e78 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000dd2:	4613      	mov	r3, r2
 8000dd4:	005b      	lsls	r3, r3, #1
 8000dd6:	4413      	add	r3, r2
 8000dd8:	009b      	lsls	r3, r3, #2
 8000dda:	440b      	add	r3, r1
 8000ddc:	3302      	adds	r3, #2
 8000dde:	4602      	mov	r2, r0
 8000de0:	801a      	strh	r2, [r3, #0]
			if (task[i].counter <= 0)
 8000de2:	7bfa      	ldrb	r2, [r7, #15]
 8000de4:	4924      	ldr	r1, [pc, #144]	@ (8000e78 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000de6:	4613      	mov	r3, r2
 8000de8:	005b      	lsls	r3, r3, #1
 8000dea:	4413      	add	r3, r2
 8000dec:	009b      	lsls	r3, r3, #2
 8000dee:	440b      	add	r3, r1
 8000df0:	3302      	adds	r3, #2
 8000df2:	881b      	ldrh	r3, [r3, #0]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d12c      	bne.n	8000e52 <HAL_TIM_PeriodElapsedCallback+0xf2>
			{
				task[i].counter = task[i].period;
 8000df8:	7bf9      	ldrb	r1, [r7, #15]
 8000dfa:	7bfa      	ldrb	r2, [r7, #15]
 8000dfc:	481e      	ldr	r0, [pc, #120]	@ (8000e78 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000dfe:	460b      	mov	r3, r1
 8000e00:	005b      	lsls	r3, r3, #1
 8000e02:	440b      	add	r3, r1
 8000e04:	009b      	lsls	r3, r3, #2
 8000e06:	4403      	add	r3, r0
 8000e08:	8818      	ldrh	r0, [r3, #0]
 8000e0a:	491b      	ldr	r1, [pc, #108]	@ (8000e78 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	4413      	add	r3, r2
 8000e12:	009b      	lsls	r3, r3, #2
 8000e14:	440b      	add	r3, r1
 8000e16:	3302      	adds	r3, #2
 8000e18:	4602      	mov	r2, r0
 8000e1a:	801a      	strh	r2, [r3, #0]
				task[i].flag = 1;
 8000e1c:	7bfa      	ldrb	r2, [r7, #15]
 8000e1e:	4916      	ldr	r1, [pc, #88]	@ (8000e78 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000e20:	4613      	mov	r3, r2
 8000e22:	005b      	lsls	r3, r3, #1
 8000e24:	4413      	add	r3, r2
 8000e26:	009b      	lsls	r3, r3, #2
 8000e28:	440b      	add	r3, r1
 8000e2a:	3305      	adds	r3, #5
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	701a      	strb	r2, [r3, #0]
				globalFlag = globalFlag | task[i].flag;
 8000e30:	7bfa      	ldrb	r2, [r7, #15]
 8000e32:	4911      	ldr	r1, [pc, #68]	@ (8000e78 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000e34:	4613      	mov	r3, r2
 8000e36:	005b      	lsls	r3, r3, #1
 8000e38:	4413      	add	r3, r2
 8000e3a:	009b      	lsls	r3, r3, #2
 8000e3c:	440b      	add	r3, r1
 8000e3e:	3305      	adds	r3, #5
 8000e40:	781a      	ldrb	r2, [r3, #0]
 8000e42:	4b0e      	ldr	r3, [pc, #56]	@ (8000e7c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	4313      	orrs	r3, r2
 8000e48:	b2da      	uxtb	r2, r3
 8000e4a:	4b0c      	ldr	r3, [pc, #48]	@ (8000e7c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000e4c:	701a      	strb	r2, [r3, #0]
 8000e4e:	e000      	b.n	8000e52 <HAL_TIM_PeriodElapsedCallback+0xf2>
				continue;
 8000e50:	bf00      	nop
		for (uint8_t i = 0; i < MAX_TASK; i++)
 8000e52:	7bfb      	ldrb	r3, [r7, #15]
 8000e54:	3301      	adds	r3, #1
 8000e56:	73fb      	strb	r3, [r7, #15]
 8000e58:	7bfb      	ldrb	r3, [r7, #15]
 8000e5a:	2b04      	cmp	r3, #4
 8000e5c:	d9a1      	bls.n	8000da2 <HAL_TIM_PeriodElapsedCallback+0x42>
		//			task0.flag=1;
		//			task0.counter=task0.period;
		//			globalFlag=task0.flag;
		//		}
	}
}
 8000e5e:	bf00      	nop
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	20000094 	.word	0x20000094
 8000e70:	20000092 	.word	0x20000092
 8000e74:	20000096 	.word	0x20000096
 8000e78:	20000098 	.word	0x20000098
 8000e7c:	200000d4 	.word	0x200000d4

08000e80 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8000e84:	4b17      	ldr	r3, [pc, #92]	@ (8000ee4 <MX_SPI1_Init+0x64>)
 8000e86:	4a18      	ldr	r2, [pc, #96]	@ (8000ee8 <MX_SPI1_Init+0x68>)
 8000e88:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e8a:	4b16      	ldr	r3, [pc, #88]	@ (8000ee4 <MX_SPI1_Init+0x64>)
 8000e8c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e90:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e92:	4b14      	ldr	r3, [pc, #80]	@ (8000ee4 <MX_SPI1_Init+0x64>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e98:	4b12      	ldr	r3, [pc, #72]	@ (8000ee4 <MX_SPI1_Init+0x64>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e9e:	4b11      	ldr	r3, [pc, #68]	@ (8000ee4 <MX_SPI1_Init+0x64>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee4 <MX_SPI1_Init+0x64>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000eaa:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee4 <MX_SPI1_Init+0x64>)
 8000eac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000eb0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee4 <MX_SPI1_Init+0x64>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee4 <MX_SPI1_Init+0x64>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ebe:	4b09      	ldr	r3, [pc, #36]	@ (8000ee4 <MX_SPI1_Init+0x64>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ec4:	4b07      	ldr	r3, [pc, #28]	@ (8000ee4 <MX_SPI1_Init+0x64>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000eca:	4b06      	ldr	r3, [pc, #24]	@ (8000ee4 <MX_SPI1_Init+0x64>)
 8000ecc:	220a      	movs	r2, #10
 8000ece:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ed0:	4804      	ldr	r0, [pc, #16]	@ (8000ee4 <MX_SPI1_Init+0x64>)
 8000ed2:	f001 f901 	bl	80020d8 <HAL_SPI_Init>
 8000ed6:	4603      	mov	r3, r0
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000edc:	f7ff fe9a 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ee0:	bf00      	nop
 8000ee2:	bd80      	pop	{r7, pc}
 8000ee4:	200000d8 	.word	0x200000d8
 8000ee8:	40013000 	.word	0x40013000

08000eec <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b08a      	sub	sp, #40	@ 0x28
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	2200      	movs	r2, #0
 8000efa:	601a      	str	r2, [r3, #0]
 8000efc:	605a      	str	r2, [r3, #4]
 8000efe:	609a      	str	r2, [r3, #8]
 8000f00:	60da      	str	r2, [r3, #12]
 8000f02:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a19      	ldr	r2, [pc, #100]	@ (8000f70 <HAL_SPI_MspInit+0x84>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d12b      	bne.n	8000f66 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	613b      	str	r3, [r7, #16]
 8000f12:	4b18      	ldr	r3, [pc, #96]	@ (8000f74 <HAL_SPI_MspInit+0x88>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f16:	4a17      	ldr	r2, [pc, #92]	@ (8000f74 <HAL_SPI_MspInit+0x88>)
 8000f18:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000f1c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f1e:	4b15      	ldr	r3, [pc, #84]	@ (8000f74 <HAL_SPI_MspInit+0x88>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f22:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	60fb      	str	r3, [r7, #12]
 8000f2e:	4b11      	ldr	r3, [pc, #68]	@ (8000f74 <HAL_SPI_MspInit+0x88>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f32:	4a10      	ldr	r2, [pc, #64]	@ (8000f74 <HAL_SPI_MspInit+0x88>)
 8000f34:	f043 0302 	orr.w	r3, r3, #2
 8000f38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3a:	4b0e      	ldr	r3, [pc, #56]	@ (8000f74 <HAL_SPI_MspInit+0x88>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000f46:	2338      	movs	r3, #56	@ 0x38
 8000f48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f52:	2303      	movs	r3, #3
 8000f54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f56:	2305      	movs	r3, #5
 8000f58:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f5a:	f107 0314 	add.w	r3, r7, #20
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4805      	ldr	r0, [pc, #20]	@ (8000f78 <HAL_SPI_MspInit+0x8c>)
 8000f62:	f000 fa9f 	bl	80014a4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8000f66:	bf00      	nop
 8000f68:	3728      	adds	r7, #40	@ 0x28
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40013000 	.word	0x40013000
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40020400 	.word	0x40020400

08000f7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b083      	sub	sp, #12
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	607b      	str	r3, [r7, #4]
 8000f86:	4b10      	ldr	r3, [pc, #64]	@ (8000fc8 <HAL_MspInit+0x4c>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f8a:	4a0f      	ldr	r2, [pc, #60]	@ (8000fc8 <HAL_MspInit+0x4c>)
 8000f8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f92:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc8 <HAL_MspInit+0x4c>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f9a:	607b      	str	r3, [r7, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	603b      	str	r3, [r7, #0]
 8000fa2:	4b09      	ldr	r3, [pc, #36]	@ (8000fc8 <HAL_MspInit+0x4c>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa6:	4a08      	ldr	r2, [pc, #32]	@ (8000fc8 <HAL_MspInit+0x4c>)
 8000fa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fae:	4b06      	ldr	r3, [pc, #24]	@ (8000fc8 <HAL_MspInit+0x4c>)
 8000fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fb6:	603b      	str	r3, [r7, #0]
 8000fb8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	370c      	adds	r7, #12
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	40023800 	.word	0x40023800

08000fcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <NMI_Handler+0x4>

08000fd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <HardFault_Handler+0x4>

08000fdc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <MemManage_Handler+0x4>

08000fe4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <BusFault_Handler+0x4>

08000fec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <UsageFault_Handler+0x4>

08000ff4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ff8:	bf00      	nop
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001022:	f000 f90d 	bl	8001240 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001030:	4802      	ldr	r0, [pc, #8]	@ (800103c <TIM2_IRQHandler+0x10>)
 8001032:	f001 fc03 	bl	800283c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000130 	.word	0x20000130

08001040 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001040:	b480      	push	{r7}
 8001042:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001044:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <SystemInit+0x20>)
 8001046:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800104a:	4a05      	ldr	r2, [pc, #20]	@ (8001060 <SystemInit+0x20>)
 800104c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001050:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001054:	bf00      	nop
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b086      	sub	sp, #24
 8001068:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800106a:	f107 0308 	add.w	r3, r7, #8
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]
 8001074:	609a      	str	r2, [r3, #8]
 8001076:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001078:	463b      	mov	r3, r7
 800107a:	2200      	movs	r2, #0
 800107c:	601a      	str	r2, [r3, #0]
 800107e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001080:	4b1d      	ldr	r3, [pc, #116]	@ (80010f8 <MX_TIM2_Init+0x94>)
 8001082:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001086:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 840-1;
 8001088:	4b1b      	ldr	r3, [pc, #108]	@ (80010f8 <MX_TIM2_Init+0x94>)
 800108a:	f240 3247 	movw	r2, #839	@ 0x347
 800108e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001090:	4b19      	ldr	r3, [pc, #100]	@ (80010f8 <MX_TIM2_Init+0x94>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8001096:	4b18      	ldr	r3, [pc, #96]	@ (80010f8 <MX_TIM2_Init+0x94>)
 8001098:	2263      	movs	r2, #99	@ 0x63
 800109a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800109c:	4b16      	ldr	r3, [pc, #88]	@ (80010f8 <MX_TIM2_Init+0x94>)
 800109e:	2200      	movs	r2, #0
 80010a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010a2:	4b15      	ldr	r3, [pc, #84]	@ (80010f8 <MX_TIM2_Init+0x94>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80010a8:	4813      	ldr	r0, [pc, #76]	@ (80010f8 <MX_TIM2_Init+0x94>)
 80010aa:	f001 fb07 	bl	80026bc <HAL_TIM_Base_Init>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80010b4:	f7ff fdae 	bl	8000c14 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010b8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010be:	f107 0308 	add.w	r3, r7, #8
 80010c2:	4619      	mov	r1, r3
 80010c4:	480c      	ldr	r0, [pc, #48]	@ (80010f8 <MX_TIM2_Init+0x94>)
 80010c6:	f001 fca9 	bl	8002a1c <HAL_TIM_ConfigClockSource>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80010d0:	f7ff fda0 	bl	8000c14 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d4:	2300      	movs	r3, #0
 80010d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d8:	2300      	movs	r3, #0
 80010da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010dc:	463b      	mov	r3, r7
 80010de:	4619      	mov	r1, r3
 80010e0:	4805      	ldr	r0, [pc, #20]	@ (80010f8 <MX_TIM2_Init+0x94>)
 80010e2:	f001 fecb 	bl	8002e7c <HAL_TIMEx_MasterConfigSynchronization>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80010ec:	f7ff fd92 	bl	8000c14 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	3718      	adds	r7, #24
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000130 	.word	0x20000130

080010fc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b084      	sub	sp, #16
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800110c:	d115      	bne.n	800113a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
 8001112:	4b0c      	ldr	r3, [pc, #48]	@ (8001144 <HAL_TIM_Base_MspInit+0x48>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001116:	4a0b      	ldr	r2, [pc, #44]	@ (8001144 <HAL_TIM_Base_MspInit+0x48>)
 8001118:	f043 0301 	orr.w	r3, r3, #1
 800111c:	6413      	str	r3, [r2, #64]	@ 0x40
 800111e:	4b09      	ldr	r3, [pc, #36]	@ (8001144 <HAL_TIM_Base_MspInit+0x48>)
 8001120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001122:	f003 0301 	and.w	r3, r3, #1
 8001126:	60fb      	str	r3, [r7, #12]
 8001128:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800112a:	2200      	movs	r2, #0
 800112c:	2100      	movs	r1, #0
 800112e:	201c      	movs	r0, #28
 8001130:	f000 f981 	bl	8001436 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001134:	201c      	movs	r0, #28
 8001136:	f000 f99a 	bl	800146e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800113a:	bf00      	nop
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800

08001148 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001148:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001180 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800114c:	f7ff ff78 	bl	8001040 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001150:	480c      	ldr	r0, [pc, #48]	@ (8001184 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001152:	490d      	ldr	r1, [pc, #52]	@ (8001188 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001154:	4a0d      	ldr	r2, [pc, #52]	@ (800118c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001156:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001158:	e002      	b.n	8001160 <LoopCopyDataInit>

0800115a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800115a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800115c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800115e:	3304      	adds	r3, #4

08001160 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001160:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001162:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001164:	d3f9      	bcc.n	800115a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001166:	4a0a      	ldr	r2, [pc, #40]	@ (8001190 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001168:	4c0a      	ldr	r4, [pc, #40]	@ (8001194 <LoopFillZerobss+0x22>)
  movs r3, #0
 800116a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800116c:	e001      	b.n	8001172 <LoopFillZerobss>

0800116e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800116e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001170:	3204      	adds	r2, #4

08001172 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001172:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001174:	d3fb      	bcc.n	800116e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001176:	f001 ffe9 	bl	800314c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800117a:	f7ff fccd 	bl	8000b18 <main>
  bx  lr    
 800117e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001180:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001184:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001188:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800118c:	080031cc 	.word	0x080031cc
  ldr r2, =_sbss
 8001190:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001194:	2000017c 	.word	0x2000017c

08001198 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001198:	e7fe      	b.n	8001198 <ADC_IRQHandler>
	...

0800119c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011a0:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <HAL_Init+0x40>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a0d      	ldr	r2, [pc, #52]	@ (80011dc <HAL_Init+0x40>)
 80011a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011ac:	4b0b      	ldr	r3, [pc, #44]	@ (80011dc <HAL_Init+0x40>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	4a0a      	ldr	r2, [pc, #40]	@ (80011dc <HAL_Init+0x40>)
 80011b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011b8:	4b08      	ldr	r3, [pc, #32]	@ (80011dc <HAL_Init+0x40>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a07      	ldr	r2, [pc, #28]	@ (80011dc <HAL_Init+0x40>)
 80011be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011c4:	2003      	movs	r0, #3
 80011c6:	f000 f92b 	bl	8001420 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011ca:	200f      	movs	r0, #15
 80011cc:	f000 f808 	bl	80011e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011d0:	f7ff fed4 	bl	8000f7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011d4:	2300      	movs	r3, #0
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	40023c00 	.word	0x40023c00

080011e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011e8:	4b12      	ldr	r3, [pc, #72]	@ (8001234 <HAL_InitTick+0x54>)
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	4b12      	ldr	r3, [pc, #72]	@ (8001238 <HAL_InitTick+0x58>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	4619      	mov	r1, r3
 80011f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80011fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80011fe:	4618      	mov	r0, r3
 8001200:	f000 f943 	bl	800148a <HAL_SYSTICK_Config>
 8001204:	4603      	mov	r3, r0
 8001206:	2b00      	cmp	r3, #0
 8001208:	d001      	beq.n	800120e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800120a:	2301      	movs	r3, #1
 800120c:	e00e      	b.n	800122c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	2b0f      	cmp	r3, #15
 8001212:	d80a      	bhi.n	800122a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001214:	2200      	movs	r2, #0
 8001216:	6879      	ldr	r1, [r7, #4]
 8001218:	f04f 30ff 	mov.w	r0, #4294967295
 800121c:	f000 f90b 	bl	8001436 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001220:	4a06      	ldr	r2, [pc, #24]	@ (800123c <HAL_InitTick+0x5c>)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001226:	2300      	movs	r3, #0
 8001228:	e000      	b.n	800122c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
}
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000010 	.word	0x20000010
 8001238:	20000018 	.word	0x20000018
 800123c:	20000014 	.word	0x20000014

08001240 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001244:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <HAL_IncTick+0x20>)
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	461a      	mov	r2, r3
 800124a:	4b06      	ldr	r3, [pc, #24]	@ (8001264 <HAL_IncTick+0x24>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4413      	add	r3, r2
 8001250:	4a04      	ldr	r2, [pc, #16]	@ (8001264 <HAL_IncTick+0x24>)
 8001252:	6013      	str	r3, [r2, #0]
}
 8001254:	bf00      	nop
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	20000018 	.word	0x20000018
 8001264:	20000178 	.word	0x20000178

08001268 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0
  return uwTick;
 800126c:	4b03      	ldr	r3, [pc, #12]	@ (800127c <HAL_GetTick+0x14>)
 800126e:	681b      	ldr	r3, [r3, #0]
}
 8001270:	4618      	mov	r0, r3
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	20000178 	.word	0x20000178

08001280 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001290:	4b0c      	ldr	r3, [pc, #48]	@ (80012c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001296:	68ba      	ldr	r2, [r7, #8]
 8001298:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800129c:	4013      	ands	r3, r2
 800129e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012b2:	4a04      	ldr	r2, [pc, #16]	@ (80012c4 <__NVIC_SetPriorityGrouping+0x44>)
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	60d3      	str	r3, [r2, #12]
}
 80012b8:	bf00      	nop
 80012ba:	3714      	adds	r7, #20
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr
 80012c4:	e000ed00 	.word	0xe000ed00

080012c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012cc:	4b04      	ldr	r3, [pc, #16]	@ (80012e0 <__NVIC_GetPriorityGrouping+0x18>)
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	0a1b      	lsrs	r3, r3, #8
 80012d2:	f003 0307 	and.w	r3, r3, #7
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	db0b      	blt.n	800130e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012f6:	79fb      	ldrb	r3, [r7, #7]
 80012f8:	f003 021f 	and.w	r2, r3, #31
 80012fc:	4907      	ldr	r1, [pc, #28]	@ (800131c <__NVIC_EnableIRQ+0x38>)
 80012fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001302:	095b      	lsrs	r3, r3, #5
 8001304:	2001      	movs	r0, #1
 8001306:	fa00 f202 	lsl.w	r2, r0, r2
 800130a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
 800131a:	bf00      	nop
 800131c:	e000e100 	.word	0xe000e100

08001320 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	6039      	str	r1, [r7, #0]
 800132a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800132c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001330:	2b00      	cmp	r3, #0
 8001332:	db0a      	blt.n	800134a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	b2da      	uxtb	r2, r3
 8001338:	490c      	ldr	r1, [pc, #48]	@ (800136c <__NVIC_SetPriority+0x4c>)
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	0112      	lsls	r2, r2, #4
 8001340:	b2d2      	uxtb	r2, r2
 8001342:	440b      	add	r3, r1
 8001344:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001348:	e00a      	b.n	8001360 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134a:	683b      	ldr	r3, [r7, #0]
 800134c:	b2da      	uxtb	r2, r3
 800134e:	4908      	ldr	r1, [pc, #32]	@ (8001370 <__NVIC_SetPriority+0x50>)
 8001350:	79fb      	ldrb	r3, [r7, #7]
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	3b04      	subs	r3, #4
 8001358:	0112      	lsls	r2, r2, #4
 800135a:	b2d2      	uxtb	r2, r2
 800135c:	440b      	add	r3, r1
 800135e:	761a      	strb	r2, [r3, #24]
}
 8001360:	bf00      	nop
 8001362:	370c      	adds	r7, #12
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000e100 	.word	0xe000e100
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001374:	b480      	push	{r7}
 8001376:	b089      	sub	sp, #36	@ 0x24
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	f003 0307 	and.w	r3, r3, #7
 8001386:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001388:	69fb      	ldr	r3, [r7, #28]
 800138a:	f1c3 0307 	rsb	r3, r3, #7
 800138e:	2b04      	cmp	r3, #4
 8001390:	bf28      	it	cs
 8001392:	2304      	movcs	r3, #4
 8001394:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	3304      	adds	r3, #4
 800139a:	2b06      	cmp	r3, #6
 800139c:	d902      	bls.n	80013a4 <NVIC_EncodePriority+0x30>
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3b03      	subs	r3, #3
 80013a2:	e000      	b.n	80013a6 <NVIC_EncodePriority+0x32>
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013a8:	f04f 32ff 	mov.w	r2, #4294967295
 80013ac:	69bb      	ldr	r3, [r7, #24]
 80013ae:	fa02 f303 	lsl.w	r3, r2, r3
 80013b2:	43da      	mvns	r2, r3
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	401a      	ands	r2, r3
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013bc:	f04f 31ff 	mov.w	r1, #4294967295
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	fa01 f303 	lsl.w	r3, r1, r3
 80013c6:	43d9      	mvns	r1, r3
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013cc:	4313      	orrs	r3, r2
         );
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3724      	adds	r7, #36	@ 0x24
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
	...

080013dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	3b01      	subs	r3, #1
 80013e8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013ec:	d301      	bcc.n	80013f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013ee:	2301      	movs	r3, #1
 80013f0:	e00f      	b.n	8001412 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013f2:	4a0a      	ldr	r2, [pc, #40]	@ (800141c <SysTick_Config+0x40>)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013fa:	210f      	movs	r1, #15
 80013fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001400:	f7ff ff8e 	bl	8001320 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001404:	4b05      	ldr	r3, [pc, #20]	@ (800141c <SysTick_Config+0x40>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800140a:	4b04      	ldr	r3, [pc, #16]	@ (800141c <SysTick_Config+0x40>)
 800140c:	2207      	movs	r2, #7
 800140e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	e000e010 	.word	0xe000e010

08001420 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001428:	6878      	ldr	r0, [r7, #4]
 800142a:	f7ff ff29 	bl	8001280 <__NVIC_SetPriorityGrouping>
}
 800142e:	bf00      	nop
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}

08001436 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001436:	b580      	push	{r7, lr}
 8001438:	b086      	sub	sp, #24
 800143a:	af00      	add	r7, sp, #0
 800143c:	4603      	mov	r3, r0
 800143e:	60b9      	str	r1, [r7, #8]
 8001440:	607a      	str	r2, [r7, #4]
 8001442:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001448:	f7ff ff3e 	bl	80012c8 <__NVIC_GetPriorityGrouping>
 800144c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	68b9      	ldr	r1, [r7, #8]
 8001452:	6978      	ldr	r0, [r7, #20]
 8001454:	f7ff ff8e 	bl	8001374 <NVIC_EncodePriority>
 8001458:	4602      	mov	r2, r0
 800145a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800145e:	4611      	mov	r1, r2
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff5d 	bl	8001320 <__NVIC_SetPriority>
}
 8001466:	bf00      	nop
 8001468:	3718      	adds	r7, #24
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}

0800146e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b082      	sub	sp, #8
 8001472:	af00      	add	r7, sp, #0
 8001474:	4603      	mov	r3, r0
 8001476:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001478:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147c:	4618      	mov	r0, r3
 800147e:	f7ff ff31 	bl	80012e4 <__NVIC_EnableIRQ>
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}

0800148a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	b082      	sub	sp, #8
 800148e:	af00      	add	r7, sp, #0
 8001490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001492:	6878      	ldr	r0, [r7, #4]
 8001494:	f7ff ffa2 	bl	80013dc <SysTick_Config>
 8001498:	4603      	mov	r3, r0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
	...

080014a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b089      	sub	sp, #36	@ 0x24
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014b2:	2300      	movs	r3, #0
 80014b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014b6:	2300      	movs	r3, #0
 80014b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014ba:	2300      	movs	r3, #0
 80014bc:	61fb      	str	r3, [r7, #28]
 80014be:	e16b      	b.n	8001798 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014c0:	2201      	movs	r2, #1
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	697a      	ldr	r2, [r7, #20]
 80014d0:	4013      	ands	r3, r2
 80014d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	429a      	cmp	r2, r3
 80014da:	f040 815a 	bne.w	8001792 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	f003 0303 	and.w	r3, r3, #3
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d005      	beq.n	80014f6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d130      	bne.n	8001558 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689b      	ldr	r3, [r3, #8]
 80014fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014fc:	69fb      	ldr	r3, [r7, #28]
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	2203      	movs	r2, #3
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43db      	mvns	r3, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4013      	ands	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800150e:	683b      	ldr	r3, [r7, #0]
 8001510:	68da      	ldr	r2, [r3, #12]
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4313      	orrs	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	69ba      	ldr	r2, [r7, #24]
 8001524:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800152c:	2201      	movs	r2, #1
 800152e:	69fb      	ldr	r3, [r7, #28]
 8001530:	fa02 f303 	lsl.w	r3, r2, r3
 8001534:	43db      	mvns	r3, r3
 8001536:	69ba      	ldr	r2, [r7, #24]
 8001538:	4013      	ands	r3, r2
 800153a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	091b      	lsrs	r3, r3, #4
 8001542:	f003 0201 	and.w	r2, r3, #1
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	4313      	orrs	r3, r2
 8001550:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f003 0303 	and.w	r3, r3, #3
 8001560:	2b03      	cmp	r3, #3
 8001562:	d017      	beq.n	8001594 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	68db      	ldr	r3, [r3, #12]
 8001568:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	2203      	movs	r2, #3
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43db      	mvns	r3, r3
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	4013      	ands	r3, r2
 800157a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	4313      	orrs	r3, r2
 800158c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	69ba      	ldr	r2, [r7, #24]
 8001592:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 0303 	and.w	r3, r3, #3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d123      	bne.n	80015e8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015a0:	69fb      	ldr	r3, [r7, #28]
 80015a2:	08da      	lsrs	r2, r3, #3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3208      	adds	r2, #8
 80015a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015ae:	69fb      	ldr	r3, [r7, #28]
 80015b0:	f003 0307 	and.w	r3, r3, #7
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	220f      	movs	r2, #15
 80015b8:	fa02 f303 	lsl.w	r3, r2, r3
 80015bc:	43db      	mvns	r3, r3
 80015be:	69ba      	ldr	r2, [r7, #24]
 80015c0:	4013      	ands	r3, r2
 80015c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	691a      	ldr	r2, [r3, #16]
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	f003 0307 	and.w	r3, r3, #7
 80015ce:	009b      	lsls	r3, r3, #2
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015da:	69fb      	ldr	r3, [r7, #28]
 80015dc:	08da      	lsrs	r2, r3, #3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	3208      	adds	r2, #8
 80015e2:	69b9      	ldr	r1, [r7, #24]
 80015e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	2203      	movs	r2, #3
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 0203 	and.w	r2, r3, #3
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	005b      	lsls	r3, r3, #1
 800160c:	fa02 f303 	lsl.w	r3, r2, r3
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	4313      	orrs	r3, r2
 8001614:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001624:	2b00      	cmp	r3, #0
 8001626:	f000 80b4 	beq.w	8001792 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800162a:	2300      	movs	r3, #0
 800162c:	60fb      	str	r3, [r7, #12]
 800162e:	4b60      	ldr	r3, [pc, #384]	@ (80017b0 <HAL_GPIO_Init+0x30c>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001632:	4a5f      	ldr	r2, [pc, #380]	@ (80017b0 <HAL_GPIO_Init+0x30c>)
 8001634:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001638:	6453      	str	r3, [r2, #68]	@ 0x44
 800163a:	4b5d      	ldr	r3, [pc, #372]	@ (80017b0 <HAL_GPIO_Init+0x30c>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800163e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001642:	60fb      	str	r3, [r7, #12]
 8001644:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001646:	4a5b      	ldr	r2, [pc, #364]	@ (80017b4 <HAL_GPIO_Init+0x310>)
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	089b      	lsrs	r3, r3, #2
 800164c:	3302      	adds	r3, #2
 800164e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001652:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	f003 0303 	and.w	r3, r3, #3
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	220f      	movs	r2, #15
 800165e:	fa02 f303 	lsl.w	r3, r2, r3
 8001662:	43db      	mvns	r3, r3
 8001664:	69ba      	ldr	r2, [r7, #24]
 8001666:	4013      	ands	r3, r2
 8001668:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a52      	ldr	r2, [pc, #328]	@ (80017b8 <HAL_GPIO_Init+0x314>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d02b      	beq.n	80016ca <HAL_GPIO_Init+0x226>
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4a51      	ldr	r2, [pc, #324]	@ (80017bc <HAL_GPIO_Init+0x318>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d025      	beq.n	80016c6 <HAL_GPIO_Init+0x222>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a50      	ldr	r2, [pc, #320]	@ (80017c0 <HAL_GPIO_Init+0x31c>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d01f      	beq.n	80016c2 <HAL_GPIO_Init+0x21e>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a4f      	ldr	r2, [pc, #316]	@ (80017c4 <HAL_GPIO_Init+0x320>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d019      	beq.n	80016be <HAL_GPIO_Init+0x21a>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a4e      	ldr	r2, [pc, #312]	@ (80017c8 <HAL_GPIO_Init+0x324>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d013      	beq.n	80016ba <HAL_GPIO_Init+0x216>
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4a4d      	ldr	r2, [pc, #308]	@ (80017cc <HAL_GPIO_Init+0x328>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d00d      	beq.n	80016b6 <HAL_GPIO_Init+0x212>
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4a4c      	ldr	r2, [pc, #304]	@ (80017d0 <HAL_GPIO_Init+0x32c>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d007      	beq.n	80016b2 <HAL_GPIO_Init+0x20e>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	4a4b      	ldr	r2, [pc, #300]	@ (80017d4 <HAL_GPIO_Init+0x330>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d101      	bne.n	80016ae <HAL_GPIO_Init+0x20a>
 80016aa:	2307      	movs	r3, #7
 80016ac:	e00e      	b.n	80016cc <HAL_GPIO_Init+0x228>
 80016ae:	2308      	movs	r3, #8
 80016b0:	e00c      	b.n	80016cc <HAL_GPIO_Init+0x228>
 80016b2:	2306      	movs	r3, #6
 80016b4:	e00a      	b.n	80016cc <HAL_GPIO_Init+0x228>
 80016b6:	2305      	movs	r3, #5
 80016b8:	e008      	b.n	80016cc <HAL_GPIO_Init+0x228>
 80016ba:	2304      	movs	r3, #4
 80016bc:	e006      	b.n	80016cc <HAL_GPIO_Init+0x228>
 80016be:	2303      	movs	r3, #3
 80016c0:	e004      	b.n	80016cc <HAL_GPIO_Init+0x228>
 80016c2:	2302      	movs	r3, #2
 80016c4:	e002      	b.n	80016cc <HAL_GPIO_Init+0x228>
 80016c6:	2301      	movs	r3, #1
 80016c8:	e000      	b.n	80016cc <HAL_GPIO_Init+0x228>
 80016ca:	2300      	movs	r3, #0
 80016cc:	69fa      	ldr	r2, [r7, #28]
 80016ce:	f002 0203 	and.w	r2, r2, #3
 80016d2:	0092      	lsls	r2, r2, #2
 80016d4:	4093      	lsls	r3, r2
 80016d6:	69ba      	ldr	r2, [r7, #24]
 80016d8:	4313      	orrs	r3, r2
 80016da:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016dc:	4935      	ldr	r1, [pc, #212]	@ (80017b4 <HAL_GPIO_Init+0x310>)
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	089b      	lsrs	r3, r3, #2
 80016e2:	3302      	adds	r3, #2
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016ea:	4b3b      	ldr	r3, [pc, #236]	@ (80017d8 <HAL_GPIO_Init+0x334>)
 80016ec:	689b      	ldr	r3, [r3, #8]
 80016ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	69ba      	ldr	r2, [r7, #24]
 80016f6:	4013      	ands	r3, r2
 80016f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d003      	beq.n	800170e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800170e:	4a32      	ldr	r2, [pc, #200]	@ (80017d8 <HAL_GPIO_Init+0x334>)
 8001710:	69bb      	ldr	r3, [r7, #24]
 8001712:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001714:	4b30      	ldr	r3, [pc, #192]	@ (80017d8 <HAL_GPIO_Init+0x334>)
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	43db      	mvns	r3, r3
 800171e:	69ba      	ldr	r2, [r7, #24]
 8001720:	4013      	ands	r3, r2
 8001722:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800172c:	2b00      	cmp	r3, #0
 800172e:	d003      	beq.n	8001738 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	693b      	ldr	r3, [r7, #16]
 8001734:	4313      	orrs	r3, r2
 8001736:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001738:	4a27      	ldr	r2, [pc, #156]	@ (80017d8 <HAL_GPIO_Init+0x334>)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800173e:	4b26      	ldr	r3, [pc, #152]	@ (80017d8 <HAL_GPIO_Init+0x334>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	43db      	mvns	r3, r3
 8001748:	69ba      	ldr	r2, [r7, #24]
 800174a:	4013      	ands	r3, r2
 800174c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d003      	beq.n	8001762 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	4313      	orrs	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001762:	4a1d      	ldr	r2, [pc, #116]	@ (80017d8 <HAL_GPIO_Init+0x334>)
 8001764:	69bb      	ldr	r3, [r7, #24]
 8001766:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001768:	4b1b      	ldr	r3, [pc, #108]	@ (80017d8 <HAL_GPIO_Init+0x334>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	43db      	mvns	r3, r3
 8001772:	69ba      	ldr	r2, [r7, #24]
 8001774:	4013      	ands	r3, r2
 8001776:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d003      	beq.n	800178c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	693b      	ldr	r3, [r7, #16]
 8001788:	4313      	orrs	r3, r2
 800178a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800178c:	4a12      	ldr	r2, [pc, #72]	@ (80017d8 <HAL_GPIO_Init+0x334>)
 800178e:	69bb      	ldr	r3, [r7, #24]
 8001790:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	3301      	adds	r3, #1
 8001796:	61fb      	str	r3, [r7, #28]
 8001798:	69fb      	ldr	r3, [r7, #28]
 800179a:	2b0f      	cmp	r3, #15
 800179c:	f67f ae90 	bls.w	80014c0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017a0:	bf00      	nop
 80017a2:	bf00      	nop
 80017a4:	3724      	adds	r7, #36	@ 0x24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40013800 	.word	0x40013800
 80017b8:	40020000 	.word	0x40020000
 80017bc:	40020400 	.word	0x40020400
 80017c0:	40020800 	.word	0x40020800
 80017c4:	40020c00 	.word	0x40020c00
 80017c8:	40021000 	.word	0x40021000
 80017cc:	40021400 	.word	0x40021400
 80017d0:	40021800 	.word	0x40021800
 80017d4:	40021c00 	.word	0x40021c00
 80017d8:	40013c00 	.word	0x40013c00

080017dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017dc:	b480      	push	{r7}
 80017de:	b083      	sub	sp, #12
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	460b      	mov	r3, r1
 80017e6:	807b      	strh	r3, [r7, #2]
 80017e8:	4613      	mov	r3, r2
 80017ea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017ec:	787b      	ldrb	r3, [r7, #1]
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d003      	beq.n	80017fa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017f2:	887a      	ldrh	r2, [r7, #2]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017f8:	e003      	b.n	8001802 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017fa:	887b      	ldrh	r3, [r7, #2]
 80017fc:	041a      	lsls	r2, r3, #16
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	619a      	str	r2, [r3, #24]
}
 8001802:	bf00      	nop
 8001804:	370c      	adds	r7, #12
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
	...

08001810 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b086      	sub	sp, #24
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e267      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	d075      	beq.n	800191a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800182e:	4b88      	ldr	r3, [pc, #544]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 030c 	and.w	r3, r3, #12
 8001836:	2b04      	cmp	r3, #4
 8001838:	d00c      	beq.n	8001854 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800183a:	4b85      	ldr	r3, [pc, #532]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 800183c:	689b      	ldr	r3, [r3, #8]
 800183e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001842:	2b08      	cmp	r3, #8
 8001844:	d112      	bne.n	800186c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001846:	4b82      	ldr	r3, [pc, #520]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800184e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001852:	d10b      	bne.n	800186c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001854:	4b7e      	ldr	r3, [pc, #504]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d05b      	beq.n	8001918 <HAL_RCC_OscConfig+0x108>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d157      	bne.n	8001918 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001868:	2301      	movs	r3, #1
 800186a:	e242      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001874:	d106      	bne.n	8001884 <HAL_RCC_OscConfig+0x74>
 8001876:	4b76      	ldr	r3, [pc, #472]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a75      	ldr	r2, [pc, #468]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 800187c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	e01d      	b.n	80018c0 <HAL_RCC_OscConfig+0xb0>
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800188c:	d10c      	bne.n	80018a8 <HAL_RCC_OscConfig+0x98>
 800188e:	4b70      	ldr	r3, [pc, #448]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a6f      	ldr	r2, [pc, #444]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 8001894:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001898:	6013      	str	r3, [r2, #0]
 800189a:	4b6d      	ldr	r3, [pc, #436]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a6c      	ldr	r2, [pc, #432]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 80018a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018a4:	6013      	str	r3, [r2, #0]
 80018a6:	e00b      	b.n	80018c0 <HAL_RCC_OscConfig+0xb0>
 80018a8:	4b69      	ldr	r3, [pc, #420]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a68      	ldr	r2, [pc, #416]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 80018ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80018b2:	6013      	str	r3, [r2, #0]
 80018b4:	4b66      	ldr	r3, [pc, #408]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a65      	ldr	r2, [pc, #404]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 80018ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d013      	beq.n	80018f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018c8:	f7ff fcce 	bl	8001268 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d0:	f7ff fcca 	bl	8001268 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b64      	cmp	r3, #100	@ 0x64
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e207      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e2:	4b5b      	ldr	r3, [pc, #364]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d0f0      	beq.n	80018d0 <HAL_RCC_OscConfig+0xc0>
 80018ee:	e014      	b.n	800191a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018f0:	f7ff fcba 	bl	8001268 <HAL_GetTick>
 80018f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018f6:	e008      	b.n	800190a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018f8:	f7ff fcb6 	bl	8001268 <HAL_GetTick>
 80018fc:	4602      	mov	r2, r0
 80018fe:	693b      	ldr	r3, [r7, #16]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	2b64      	cmp	r3, #100	@ 0x64
 8001904:	d901      	bls.n	800190a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001906:	2303      	movs	r3, #3
 8001908:	e1f3      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800190a:	4b51      	ldr	r3, [pc, #324]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f0      	bne.n	80018f8 <HAL_RCC_OscConfig+0xe8>
 8001916:	e000      	b.n	800191a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001918:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 0302 	and.w	r3, r3, #2
 8001922:	2b00      	cmp	r3, #0
 8001924:	d063      	beq.n	80019ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001926:	4b4a      	ldr	r3, [pc, #296]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 030c 	and.w	r3, r3, #12
 800192e:	2b00      	cmp	r3, #0
 8001930:	d00b      	beq.n	800194a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001932:	4b47      	ldr	r3, [pc, #284]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800193a:	2b08      	cmp	r3, #8
 800193c:	d11c      	bne.n	8001978 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800193e:	4b44      	ldr	r3, [pc, #272]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001946:	2b00      	cmp	r3, #0
 8001948:	d116      	bne.n	8001978 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800194a:	4b41      	ldr	r3, [pc, #260]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d005      	beq.n	8001962 <HAL_RCC_OscConfig+0x152>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d001      	beq.n	8001962 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e1c7      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001962:	4b3b      	ldr	r3, [pc, #236]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	691b      	ldr	r3, [r3, #16]
 800196e:	00db      	lsls	r3, r3, #3
 8001970:	4937      	ldr	r1, [pc, #220]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 8001972:	4313      	orrs	r3, r2
 8001974:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001976:	e03a      	b.n	80019ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d020      	beq.n	80019c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001980:	4b34      	ldr	r3, [pc, #208]	@ (8001a54 <HAL_RCC_OscConfig+0x244>)
 8001982:	2201      	movs	r2, #1
 8001984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001986:	f7ff fc6f 	bl	8001268 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800198c:	e008      	b.n	80019a0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800198e:	f7ff fc6b 	bl	8001268 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d901      	bls.n	80019a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e1a8      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019a0:	4b2b      	ldr	r3, [pc, #172]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	f003 0302 	and.w	r3, r3, #2
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d0f0      	beq.n	800198e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019ac:	4b28      	ldr	r3, [pc, #160]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	00db      	lsls	r3, r3, #3
 80019ba:	4925      	ldr	r1, [pc, #148]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 80019bc:	4313      	orrs	r3, r2
 80019be:	600b      	str	r3, [r1, #0]
 80019c0:	e015      	b.n	80019ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019c2:	4b24      	ldr	r3, [pc, #144]	@ (8001a54 <HAL_RCC_OscConfig+0x244>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c8:	f7ff fc4e 	bl	8001268 <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019d0:	f7ff fc4a 	bl	8001268 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e187      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019e2:	4b1b      	ldr	r3, [pc, #108]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d1f0      	bne.n	80019d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f003 0308 	and.w	r3, r3, #8
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d036      	beq.n	8001a68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	695b      	ldr	r3, [r3, #20]
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d016      	beq.n	8001a30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a02:	4b15      	ldr	r3, [pc, #84]	@ (8001a58 <HAL_RCC_OscConfig+0x248>)
 8001a04:	2201      	movs	r2, #1
 8001a06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a08:	f7ff fc2e 	bl	8001268 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a10:	f7ff fc2a 	bl	8001268 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e167      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a22:	4b0b      	ldr	r3, [pc, #44]	@ (8001a50 <HAL_RCC_OscConfig+0x240>)
 8001a24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a26:	f003 0302 	and.w	r3, r3, #2
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d0f0      	beq.n	8001a10 <HAL_RCC_OscConfig+0x200>
 8001a2e:	e01b      	b.n	8001a68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a30:	4b09      	ldr	r3, [pc, #36]	@ (8001a58 <HAL_RCC_OscConfig+0x248>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a36:	f7ff fc17 	bl	8001268 <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a3c:	e00e      	b.n	8001a5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a3e:	f7ff fc13 	bl	8001268 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d907      	bls.n	8001a5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e150      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
 8001a50:	40023800 	.word	0x40023800
 8001a54:	42470000 	.word	0x42470000
 8001a58:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a5c:	4b88      	ldr	r3, [pc, #544]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001a5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a60:	f003 0302 	and.w	r3, r3, #2
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d1ea      	bne.n	8001a3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0304 	and.w	r3, r3, #4
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	f000 8097 	beq.w	8001ba4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a76:	2300      	movs	r3, #0
 8001a78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a7a:	4b81      	ldr	r3, [pc, #516]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d10f      	bne.n	8001aa6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	60bb      	str	r3, [r7, #8]
 8001a8a:	4b7d      	ldr	r3, [pc, #500]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a8e:	4a7c      	ldr	r2, [pc, #496]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001a90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a96:	4b7a      	ldr	r3, [pc, #488]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa6:	4b77      	ldr	r3, [pc, #476]	@ (8001c84 <HAL_RCC_OscConfig+0x474>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d118      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ab2:	4b74      	ldr	r3, [pc, #464]	@ (8001c84 <HAL_RCC_OscConfig+0x474>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a73      	ldr	r2, [pc, #460]	@ (8001c84 <HAL_RCC_OscConfig+0x474>)
 8001ab8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001abc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001abe:	f7ff fbd3 	bl	8001268 <HAL_GetTick>
 8001ac2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ac4:	e008      	b.n	8001ad8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ac6:	f7ff fbcf 	bl	8001268 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d901      	bls.n	8001ad8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ad4:	2303      	movs	r3, #3
 8001ad6:	e10c      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad8:	4b6a      	ldr	r3, [pc, #424]	@ (8001c84 <HAL_RCC_OscConfig+0x474>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d0f0      	beq.n	8001ac6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	689b      	ldr	r3, [r3, #8]
 8001ae8:	2b01      	cmp	r3, #1
 8001aea:	d106      	bne.n	8001afa <HAL_RCC_OscConfig+0x2ea>
 8001aec:	4b64      	ldr	r3, [pc, #400]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001aee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001af0:	4a63      	ldr	r2, [pc, #396]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001af8:	e01c      	b.n	8001b34 <HAL_RCC_OscConfig+0x324>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	2b05      	cmp	r3, #5
 8001b00:	d10c      	bne.n	8001b1c <HAL_RCC_OscConfig+0x30c>
 8001b02:	4b5f      	ldr	r3, [pc, #380]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b06:	4a5e      	ldr	r2, [pc, #376]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001b08:	f043 0304 	orr.w	r3, r3, #4
 8001b0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b0e:	4b5c      	ldr	r3, [pc, #368]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001b10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b12:	4a5b      	ldr	r2, [pc, #364]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001b14:	f043 0301 	orr.w	r3, r3, #1
 8001b18:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b1a:	e00b      	b.n	8001b34 <HAL_RCC_OscConfig+0x324>
 8001b1c:	4b58      	ldr	r3, [pc, #352]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b20:	4a57      	ldr	r2, [pc, #348]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001b22:	f023 0301 	bic.w	r3, r3, #1
 8001b26:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b28:	4b55      	ldr	r3, [pc, #340]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001b2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b2c:	4a54      	ldr	r2, [pc, #336]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001b2e:	f023 0304 	bic.w	r3, r3, #4
 8001b32:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d015      	beq.n	8001b68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b3c:	f7ff fb94 	bl	8001268 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b42:	e00a      	b.n	8001b5a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b44:	f7ff fb90 	bl	8001268 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e0cb      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b5a:	4b49      	ldr	r3, [pc, #292]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0ee      	beq.n	8001b44 <HAL_RCC_OscConfig+0x334>
 8001b66:	e014      	b.n	8001b92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b68:	f7ff fb7e 	bl	8001268 <HAL_GetTick>
 8001b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b6e:	e00a      	b.n	8001b86 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b70:	f7ff fb7a 	bl	8001268 <HAL_GetTick>
 8001b74:	4602      	mov	r2, r0
 8001b76:	693b      	ldr	r3, [r7, #16]
 8001b78:	1ad3      	subs	r3, r2, r3
 8001b7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d901      	bls.n	8001b86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e0b5      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b86:	4b3e      	ldr	r3, [pc, #248]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b8a:	f003 0302 	and.w	r3, r3, #2
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1ee      	bne.n	8001b70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b92:	7dfb      	ldrb	r3, [r7, #23]
 8001b94:	2b01      	cmp	r3, #1
 8001b96:	d105      	bne.n	8001ba4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b98:	4b39      	ldr	r3, [pc, #228]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9c:	4a38      	ldr	r2, [pc, #224]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001b9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001ba2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	699b      	ldr	r3, [r3, #24]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f000 80a1 	beq.w	8001cf0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bae:	4b34      	ldr	r3, [pc, #208]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 030c 	and.w	r3, r3, #12
 8001bb6:	2b08      	cmp	r3, #8
 8001bb8:	d05c      	beq.n	8001c74 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	699b      	ldr	r3, [r3, #24]
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d141      	bne.n	8001c46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc2:	4b31      	ldr	r3, [pc, #196]	@ (8001c88 <HAL_RCC_OscConfig+0x478>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bc8:	f7ff fb4e 	bl	8001268 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd0:	f7ff fb4a 	bl	8001268 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e087      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001be2:	4b27      	ldr	r3, [pc, #156]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1f0      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	69da      	ldr	r2, [r3, #28]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a1b      	ldr	r3, [r3, #32]
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bfc:	019b      	lsls	r3, r3, #6
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c04:	085b      	lsrs	r3, r3, #1
 8001c06:	3b01      	subs	r3, #1
 8001c08:	041b      	lsls	r3, r3, #16
 8001c0a:	431a      	orrs	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c10:	061b      	lsls	r3, r3, #24
 8001c12:	491b      	ldr	r1, [pc, #108]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001c14:	4313      	orrs	r3, r2
 8001c16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c18:	4b1b      	ldr	r3, [pc, #108]	@ (8001c88 <HAL_RCC_OscConfig+0x478>)
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c1e:	f7ff fb23 	bl	8001268 <HAL_GetTick>
 8001c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c24:	e008      	b.n	8001c38 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c26:	f7ff fb1f 	bl	8001268 <HAL_GetTick>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	693b      	ldr	r3, [r7, #16]
 8001c2e:	1ad3      	subs	r3, r2, r3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d901      	bls.n	8001c38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001c34:	2303      	movs	r3, #3
 8001c36:	e05c      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c38:	4b11      	ldr	r3, [pc, #68]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0f0      	beq.n	8001c26 <HAL_RCC_OscConfig+0x416>
 8001c44:	e054      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c46:	4b10      	ldr	r3, [pc, #64]	@ (8001c88 <HAL_RCC_OscConfig+0x478>)
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4c:	f7ff fb0c 	bl	8001268 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c54:	f7ff fb08 	bl	8001268 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e045      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c66:	4b06      	ldr	r3, [pc, #24]	@ (8001c80 <HAL_RCC_OscConfig+0x470>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d1f0      	bne.n	8001c54 <HAL_RCC_OscConfig+0x444>
 8001c72:	e03d      	b.n	8001cf0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	699b      	ldr	r3, [r3, #24]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d107      	bne.n	8001c8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e038      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
 8001c80:	40023800 	.word	0x40023800
 8001c84:	40007000 	.word	0x40007000
 8001c88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8001cfc <HAL_RCC_OscConfig+0x4ec>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	699b      	ldr	r3, [r3, #24]
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d028      	beq.n	8001cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d121      	bne.n	8001cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d11a      	bne.n	8001cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cb6:	68fa      	ldr	r2, [r7, #12]
 8001cb8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001cc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cc4:	4293      	cmp	r3, r2
 8001cc6:	d111      	bne.n	8001cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cd2:	085b      	lsrs	r3, r3, #1
 8001cd4:	3b01      	subs	r3, #1
 8001cd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d107      	bne.n	8001cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ce6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d001      	beq.n	8001cf0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e000      	b.n	8001cf2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3718      	adds	r7, #24
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}
 8001cfa:	bf00      	nop
 8001cfc:	40023800 	.word	0x40023800

08001d00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b084      	sub	sp, #16
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d101      	bne.n	8001d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e0cc      	b.n	8001eae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d14:	4b68      	ldr	r3, [pc, #416]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0307 	and.w	r3, r3, #7
 8001d1c:	683a      	ldr	r2, [r7, #0]
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d90c      	bls.n	8001d3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d22:	4b65      	ldr	r3, [pc, #404]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d24:	683a      	ldr	r2, [r7, #0]
 8001d26:	b2d2      	uxtb	r2, r2
 8001d28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d2a:	4b63      	ldr	r3, [pc, #396]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	f003 0307 	and.w	r3, r3, #7
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d001      	beq.n	8001d3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e0b8      	b.n	8001eae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f003 0302 	and.w	r3, r3, #2
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d020      	beq.n	8001d8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f003 0304 	and.w	r3, r3, #4
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d005      	beq.n	8001d60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d54:	4b59      	ldr	r3, [pc, #356]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	4a58      	ldr	r2, [pc, #352]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001d5a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001d5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f003 0308 	and.w	r3, r3, #8
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d005      	beq.n	8001d78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d6c:	4b53      	ldr	r3, [pc, #332]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	4a52      	ldr	r2, [pc, #328]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001d72:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001d76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d78:	4b50      	ldr	r3, [pc, #320]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	494d      	ldr	r1, [pc, #308]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001d86:	4313      	orrs	r3, r2
 8001d88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f003 0301 	and.w	r3, r3, #1
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d044      	beq.n	8001e20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d107      	bne.n	8001dae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d9e:	4b47      	ldr	r3, [pc, #284]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d119      	bne.n	8001dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e07f      	b.n	8001eae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d003      	beq.n	8001dbe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001dba:	2b03      	cmp	r3, #3
 8001dbc:	d107      	bne.n	8001dce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dbe:	4b3f      	ldr	r3, [pc, #252]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d109      	bne.n	8001dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e06f      	b.n	8001eae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dce:	4b3b      	ldr	r3, [pc, #236]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0302 	and.w	r3, r3, #2
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d101      	bne.n	8001dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e067      	b.n	8001eae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001dde:	4b37      	ldr	r3, [pc, #220]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	f023 0203 	bic.w	r2, r3, #3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	4934      	ldr	r1, [pc, #208]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001dec:	4313      	orrs	r3, r2
 8001dee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001df0:	f7ff fa3a 	bl	8001268 <HAL_GetTick>
 8001df4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001df6:	e00a      	b.n	8001e0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001df8:	f7ff fa36 	bl	8001268 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e04f      	b.n	8001eae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e0e:	4b2b      	ldr	r3, [pc, #172]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f003 020c 	and.w	r2, r3, #12
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d1eb      	bne.n	8001df8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e20:	4b25      	ldr	r3, [pc, #148]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	683a      	ldr	r2, [r7, #0]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d20c      	bcs.n	8001e48 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e2e:	4b22      	ldr	r3, [pc, #136]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e30:	683a      	ldr	r2, [r7, #0]
 8001e32:	b2d2      	uxtb	r2, r2
 8001e34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e36:	4b20      	ldr	r3, [pc, #128]	@ (8001eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d001      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e032      	b.n	8001eae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0304 	and.w	r3, r3, #4
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d008      	beq.n	8001e66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e54:	4b19      	ldr	r3, [pc, #100]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	4916      	ldr	r1, [pc, #88]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001e62:	4313      	orrs	r3, r2
 8001e64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0308 	and.w	r3, r3, #8
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d009      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e72:	4b12      	ldr	r3, [pc, #72]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	691b      	ldr	r3, [r3, #16]
 8001e7e:	00db      	lsls	r3, r3, #3
 8001e80:	490e      	ldr	r1, [pc, #56]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e86:	f000 f821 	bl	8001ecc <HAL_RCC_GetSysClockFreq>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001ebc <HAL_RCC_ClockConfig+0x1bc>)
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	091b      	lsrs	r3, r3, #4
 8001e92:	f003 030f 	and.w	r3, r3, #15
 8001e96:	490a      	ldr	r1, [pc, #40]	@ (8001ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8001e98:	5ccb      	ldrb	r3, [r1, r3]
 8001e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e9e:	4a09      	ldr	r2, [pc, #36]	@ (8001ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8001ea0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001ea2:	4b09      	ldr	r3, [pc, #36]	@ (8001ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f7ff f99a 	bl	80011e0 <HAL_InitTick>

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3710      	adds	r7, #16
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}
 8001eb6:	bf00      	nop
 8001eb8:	40023c00 	.word	0x40023c00
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	080031ac 	.word	0x080031ac
 8001ec4:	20000010 	.word	0x20000010
 8001ec8:	20000014 	.word	0x20000014

08001ecc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ecc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001ed0:	b094      	sub	sp, #80	@ 0x50
 8001ed2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001edc:	2300      	movs	r3, #0
 8001ede:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001ee4:	4b79      	ldr	r3, [pc, #484]	@ (80020cc <HAL_RCC_GetSysClockFreq+0x200>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 030c 	and.w	r3, r3, #12
 8001eec:	2b08      	cmp	r3, #8
 8001eee:	d00d      	beq.n	8001f0c <HAL_RCC_GetSysClockFreq+0x40>
 8001ef0:	2b08      	cmp	r3, #8
 8001ef2:	f200 80e1 	bhi.w	80020b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d002      	beq.n	8001f00 <HAL_RCC_GetSysClockFreq+0x34>
 8001efa:	2b04      	cmp	r3, #4
 8001efc:	d003      	beq.n	8001f06 <HAL_RCC_GetSysClockFreq+0x3a>
 8001efe:	e0db      	b.n	80020b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001f00:	4b73      	ldr	r3, [pc, #460]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001f02:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f04:	e0db      	b.n	80020be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001f06:	4b73      	ldr	r3, [pc, #460]	@ (80020d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001f08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001f0a:	e0d8      	b.n	80020be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f0c:	4b6f      	ldr	r3, [pc, #444]	@ (80020cc <HAL_RCC_GetSysClockFreq+0x200>)
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001f14:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f16:	4b6d      	ldr	r3, [pc, #436]	@ (80020cc <HAL_RCC_GetSysClockFreq+0x200>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d063      	beq.n	8001fea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f22:	4b6a      	ldr	r3, [pc, #424]	@ (80020cc <HAL_RCC_GetSysClockFreq+0x200>)
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	099b      	lsrs	r3, r3, #6
 8001f28:	2200      	movs	r2, #0
 8001f2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f34:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f36:	2300      	movs	r3, #0
 8001f38:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001f3e:	4622      	mov	r2, r4
 8001f40:	462b      	mov	r3, r5
 8001f42:	f04f 0000 	mov.w	r0, #0
 8001f46:	f04f 0100 	mov.w	r1, #0
 8001f4a:	0159      	lsls	r1, r3, #5
 8001f4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f50:	0150      	lsls	r0, r2, #5
 8001f52:	4602      	mov	r2, r0
 8001f54:	460b      	mov	r3, r1
 8001f56:	4621      	mov	r1, r4
 8001f58:	1a51      	subs	r1, r2, r1
 8001f5a:	6139      	str	r1, [r7, #16]
 8001f5c:	4629      	mov	r1, r5
 8001f5e:	eb63 0301 	sbc.w	r3, r3, r1
 8001f62:	617b      	str	r3, [r7, #20]
 8001f64:	f04f 0200 	mov.w	r2, #0
 8001f68:	f04f 0300 	mov.w	r3, #0
 8001f6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f70:	4659      	mov	r1, fp
 8001f72:	018b      	lsls	r3, r1, #6
 8001f74:	4651      	mov	r1, sl
 8001f76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f7a:	4651      	mov	r1, sl
 8001f7c:	018a      	lsls	r2, r1, #6
 8001f7e:	4651      	mov	r1, sl
 8001f80:	ebb2 0801 	subs.w	r8, r2, r1
 8001f84:	4659      	mov	r1, fp
 8001f86:	eb63 0901 	sbc.w	r9, r3, r1
 8001f8a:	f04f 0200 	mov.w	r2, #0
 8001f8e:	f04f 0300 	mov.w	r3, #0
 8001f92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f9e:	4690      	mov	r8, r2
 8001fa0:	4699      	mov	r9, r3
 8001fa2:	4623      	mov	r3, r4
 8001fa4:	eb18 0303 	adds.w	r3, r8, r3
 8001fa8:	60bb      	str	r3, [r7, #8]
 8001faa:	462b      	mov	r3, r5
 8001fac:	eb49 0303 	adc.w	r3, r9, r3
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	f04f 0200 	mov.w	r2, #0
 8001fb6:	f04f 0300 	mov.w	r3, #0
 8001fba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001fbe:	4629      	mov	r1, r5
 8001fc0:	024b      	lsls	r3, r1, #9
 8001fc2:	4621      	mov	r1, r4
 8001fc4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001fc8:	4621      	mov	r1, r4
 8001fca:	024a      	lsls	r2, r1, #9
 8001fcc:	4610      	mov	r0, r2
 8001fce:	4619      	mov	r1, r3
 8001fd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001fd6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001fd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001fdc:	f7fe f8f4 	bl	80001c8 <__aeabi_uldivmod>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001fe8:	e058      	b.n	800209c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fea:	4b38      	ldr	r3, [pc, #224]	@ (80020cc <HAL_RCC_GetSysClockFreq+0x200>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	099b      	lsrs	r3, r3, #6
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	4611      	mov	r1, r2
 8001ff6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001ffa:	623b      	str	r3, [r7, #32]
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	627b      	str	r3, [r7, #36]	@ 0x24
 8002000:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002004:	4642      	mov	r2, r8
 8002006:	464b      	mov	r3, r9
 8002008:	f04f 0000 	mov.w	r0, #0
 800200c:	f04f 0100 	mov.w	r1, #0
 8002010:	0159      	lsls	r1, r3, #5
 8002012:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002016:	0150      	lsls	r0, r2, #5
 8002018:	4602      	mov	r2, r0
 800201a:	460b      	mov	r3, r1
 800201c:	4641      	mov	r1, r8
 800201e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002022:	4649      	mov	r1, r9
 8002024:	eb63 0b01 	sbc.w	fp, r3, r1
 8002028:	f04f 0200 	mov.w	r2, #0
 800202c:	f04f 0300 	mov.w	r3, #0
 8002030:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002034:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002038:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800203c:	ebb2 040a 	subs.w	r4, r2, sl
 8002040:	eb63 050b 	sbc.w	r5, r3, fp
 8002044:	f04f 0200 	mov.w	r2, #0
 8002048:	f04f 0300 	mov.w	r3, #0
 800204c:	00eb      	lsls	r3, r5, #3
 800204e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002052:	00e2      	lsls	r2, r4, #3
 8002054:	4614      	mov	r4, r2
 8002056:	461d      	mov	r5, r3
 8002058:	4643      	mov	r3, r8
 800205a:	18e3      	adds	r3, r4, r3
 800205c:	603b      	str	r3, [r7, #0]
 800205e:	464b      	mov	r3, r9
 8002060:	eb45 0303 	adc.w	r3, r5, r3
 8002064:	607b      	str	r3, [r7, #4]
 8002066:	f04f 0200 	mov.w	r2, #0
 800206a:	f04f 0300 	mov.w	r3, #0
 800206e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002072:	4629      	mov	r1, r5
 8002074:	028b      	lsls	r3, r1, #10
 8002076:	4621      	mov	r1, r4
 8002078:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800207c:	4621      	mov	r1, r4
 800207e:	028a      	lsls	r2, r1, #10
 8002080:	4610      	mov	r0, r2
 8002082:	4619      	mov	r1, r3
 8002084:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002086:	2200      	movs	r2, #0
 8002088:	61bb      	str	r3, [r7, #24]
 800208a:	61fa      	str	r2, [r7, #28]
 800208c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002090:	f7fe f89a 	bl	80001c8 <__aeabi_uldivmod>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	4613      	mov	r3, r2
 800209a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800209c:	4b0b      	ldr	r3, [pc, #44]	@ (80020cc <HAL_RCC_GetSysClockFreq+0x200>)
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	0c1b      	lsrs	r3, r3, #16
 80020a2:	f003 0303 	and.w	r3, r3, #3
 80020a6:	3301      	adds	r3, #1
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80020ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80020ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80020b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80020b6:	e002      	b.n	80020be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80020b8:	4b05      	ldr	r3, [pc, #20]	@ (80020d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80020ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80020bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3750      	adds	r7, #80	@ 0x50
 80020c4:	46bd      	mov	sp, r7
 80020c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80020ca:	bf00      	nop
 80020cc:	40023800 	.word	0x40023800
 80020d0:	00f42400 	.word	0x00f42400
 80020d4:	007a1200 	.word	0x007a1200

080020d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b082      	sub	sp, #8
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d101      	bne.n	80020ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020e6:	2301      	movs	r3, #1
 80020e8:	e07b      	b.n	80021e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d108      	bne.n	8002104 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80020fa:	d009      	beq.n	8002110 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2200      	movs	r2, #0
 8002100:	61da      	str	r2, [r3, #28]
 8002102:	e005      	b.n	8002110 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2200      	movs	r2, #0
 8002114:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800211c:	b2db      	uxtb	r3, r3
 800211e:	2b00      	cmp	r3, #0
 8002120:	d106      	bne.n	8002130 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7fe fede 	bl	8000eec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2202      	movs	r2, #2
 8002134:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002146:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002158:	431a      	orrs	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002162:	431a      	orrs	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	691b      	ldr	r3, [r3, #16]
 8002168:	f003 0302 	and.w	r3, r3, #2
 800216c:	431a      	orrs	r2, r3
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	f003 0301 	and.w	r3, r3, #1
 8002176:	431a      	orrs	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	699b      	ldr	r3, [r3, #24]
 800217c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002180:	431a      	orrs	r2, r3
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69db      	ldr	r3, [r3, #28]
 8002186:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a1b      	ldr	r3, [r3, #32]
 8002190:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002194:	ea42 0103 	orr.w	r1, r2, r3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800219c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	699b      	ldr	r3, [r3, #24]
 80021ac:	0c1b      	lsrs	r3, r3, #16
 80021ae:	f003 0104 	and.w	r1, r3, #4
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021b6:	f003 0210 	and.w	r2, r3, #16
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	430a      	orrs	r2, r1
 80021c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	69da      	ldr	r2, [r3, #28]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	2200      	movs	r2, #0
 80021d6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2201      	movs	r2, #1
 80021dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b088      	sub	sp, #32
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	60f8      	str	r0, [r7, #12]
 80021f2:	60b9      	str	r1, [r7, #8]
 80021f4:	603b      	str	r3, [r7, #0]
 80021f6:	4613      	mov	r3, r2
 80021f8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021fa:	f7ff f835 	bl	8001268 <HAL_GetTick>
 80021fe:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002200:	88fb      	ldrh	r3, [r7, #6]
 8002202:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800220a:	b2db      	uxtb	r3, r3
 800220c:	2b01      	cmp	r3, #1
 800220e:	d001      	beq.n	8002214 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002210:	2302      	movs	r3, #2
 8002212:	e12a      	b.n	800246a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d002      	beq.n	8002220 <HAL_SPI_Transmit+0x36>
 800221a:	88fb      	ldrh	r3, [r7, #6]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d101      	bne.n	8002224 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002220:	2301      	movs	r3, #1
 8002222:	e122      	b.n	800246a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800222a:	2b01      	cmp	r3, #1
 800222c:	d101      	bne.n	8002232 <HAL_SPI_Transmit+0x48>
 800222e:	2302      	movs	r3, #2
 8002230:	e11b      	b.n	800246a <HAL_SPI_Transmit+0x280>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2201      	movs	r2, #1
 8002236:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2203      	movs	r2, #3
 800223e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	68ba      	ldr	r2, [r7, #8]
 800224c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	88fa      	ldrh	r2, [r7, #6]
 8002252:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	88fa      	ldrh	r2, [r7, #6]
 8002258:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	2200      	movs	r2, #0
 800225e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	2200      	movs	r2, #0
 8002264:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	2200      	movs	r2, #0
 8002270:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	2200      	movs	r2, #0
 8002276:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002280:	d10f      	bne.n	80022a2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002290:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80022a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022ac:	2b40      	cmp	r3, #64	@ 0x40
 80022ae:	d007      	beq.n	80022c0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	681a      	ldr	r2, [r3, #0]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80022c8:	d152      	bne.n	8002370 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d002      	beq.n	80022d8 <HAL_SPI_Transmit+0xee>
 80022d2:	8b7b      	ldrh	r3, [r7, #26]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d145      	bne.n	8002364 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022dc:	881a      	ldrh	r2, [r3, #0]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e8:	1c9a      	adds	r2, r3, #2
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022f2:	b29b      	uxth	r3, r3
 80022f4:	3b01      	subs	r3, #1
 80022f6:	b29a      	uxth	r2, r3
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80022fc:	e032      	b.n	8002364 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	689b      	ldr	r3, [r3, #8]
 8002304:	f003 0302 	and.w	r3, r3, #2
 8002308:	2b02      	cmp	r3, #2
 800230a:	d112      	bne.n	8002332 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002310:	881a      	ldrh	r2, [r3, #0]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231c:	1c9a      	adds	r2, r3, #2
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002326:	b29b      	uxth	r3, r3
 8002328:	3b01      	subs	r3, #1
 800232a:	b29a      	uxth	r2, r3
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002330:	e018      	b.n	8002364 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002332:	f7fe ff99 	bl	8001268 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	d803      	bhi.n	800234a <HAL_SPI_Transmit+0x160>
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002348:	d102      	bne.n	8002350 <HAL_SPI_Transmit+0x166>
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d109      	bne.n	8002364 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2200      	movs	r2, #0
 800235c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	e082      	b.n	800246a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002368:	b29b      	uxth	r3, r3
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1c7      	bne.n	80022fe <HAL_SPI_Transmit+0x114>
 800236e:	e053      	b.n	8002418 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d002      	beq.n	800237e <HAL_SPI_Transmit+0x194>
 8002378:	8b7b      	ldrh	r3, [r7, #26]
 800237a:	2b01      	cmp	r3, #1
 800237c:	d147      	bne.n	800240e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	330c      	adds	r3, #12
 8002388:	7812      	ldrb	r2, [r2, #0]
 800238a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002390:	1c5a      	adds	r2, r3, #1
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800239a:	b29b      	uxth	r3, r3
 800239c:	3b01      	subs	r3, #1
 800239e:	b29a      	uxth	r2, r3
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80023a4:	e033      	b.n	800240e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	f003 0302 	and.w	r3, r3, #2
 80023b0:	2b02      	cmp	r3, #2
 80023b2:	d113      	bne.n	80023dc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	330c      	adds	r3, #12
 80023be:	7812      	ldrb	r2, [r2, #0]
 80023c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c6:	1c5a      	adds	r2, r3, #1
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	3b01      	subs	r3, #1
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80023da:	e018      	b.n	800240e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023dc:	f7fe ff44 	bl	8001268 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d803      	bhi.n	80023f4 <HAL_SPI_Transmit+0x20a>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023f2:	d102      	bne.n	80023fa <HAL_SPI_Transmit+0x210>
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d109      	bne.n	800240e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	2201      	movs	r2, #1
 80023fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800240a:	2303      	movs	r3, #3
 800240c:	e02d      	b.n	800246a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002412:	b29b      	uxth	r3, r3
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1c6      	bne.n	80023a6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002418:	69fa      	ldr	r2, [r7, #28]
 800241a:	6839      	ldr	r1, [r7, #0]
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 f8b1 	bl	8002584 <SPI_EndRxTxTransaction>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d002      	beq.n	800242e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2220      	movs	r2, #32
 800242c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10a      	bne.n	800244c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002436:	2300      	movs	r3, #0
 8002438:	617b      	str	r3, [r7, #20]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68db      	ldr	r3, [r3, #12]
 8002440:	617b      	str	r3, [r7, #20]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	617b      	str	r3, [r7, #20]
 800244a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e000      	b.n	800246a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002468:	2300      	movs	r3, #0
  }
}
 800246a:	4618      	mov	r0, r3
 800246c:	3720      	adds	r7, #32
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
	...

08002474 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b088      	sub	sp, #32
 8002478:	af00      	add	r7, sp, #0
 800247a:	60f8      	str	r0, [r7, #12]
 800247c:	60b9      	str	r1, [r7, #8]
 800247e:	603b      	str	r3, [r7, #0]
 8002480:	4613      	mov	r3, r2
 8002482:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002484:	f7fe fef0 	bl	8001268 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800248c:	1a9b      	subs	r3, r3, r2
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	4413      	add	r3, r2
 8002492:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002494:	f7fe fee8 	bl	8001268 <HAL_GetTick>
 8002498:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800249a:	4b39      	ldr	r3, [pc, #228]	@ (8002580 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	015b      	lsls	r3, r3, #5
 80024a0:	0d1b      	lsrs	r3, r3, #20
 80024a2:	69fa      	ldr	r2, [r7, #28]
 80024a4:	fb02 f303 	mul.w	r3, r2, r3
 80024a8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80024aa:	e055      	b.n	8002558 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024b2:	d051      	beq.n	8002558 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80024b4:	f7fe fed8 	bl	8001268 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	69bb      	ldr	r3, [r7, #24]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	69fa      	ldr	r2, [r7, #28]
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d902      	bls.n	80024ca <SPI_WaitFlagStateUntilTimeout+0x56>
 80024c4:	69fb      	ldr	r3, [r7, #28]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d13d      	bne.n	8002546 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	685a      	ldr	r2, [r3, #4]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80024d8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80024e2:	d111      	bne.n	8002508 <SPI_WaitFlagStateUntilTimeout+0x94>
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024ec:	d004      	beq.n	80024f8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024f6:	d107      	bne.n	8002508 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002506:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800250c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002510:	d10f      	bne.n	8002532 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681a      	ldr	r2, [r3, #0]
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002520:	601a      	str	r2, [r3, #0]
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002530:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2201      	movs	r2, #1
 8002536:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e018      	b.n	8002578 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d102      	bne.n	8002552 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800254c:	2300      	movs	r3, #0
 800254e:	61fb      	str	r3, [r7, #28]
 8002550:	e002      	b.n	8002558 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	3b01      	subs	r3, #1
 8002556:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	4013      	ands	r3, r2
 8002562:	68ba      	ldr	r2, [r7, #8]
 8002564:	429a      	cmp	r2, r3
 8002566:	bf0c      	ite	eq
 8002568:	2301      	moveq	r3, #1
 800256a:	2300      	movne	r3, #0
 800256c:	b2db      	uxtb	r3, r3
 800256e:	461a      	mov	r2, r3
 8002570:	79fb      	ldrb	r3, [r7, #7]
 8002572:	429a      	cmp	r2, r3
 8002574:	d19a      	bne.n	80024ac <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	3720      	adds	r7, #32
 800257c:	46bd      	mov	sp, r7
 800257e:	bd80      	pop	{r7, pc}
 8002580:	20000010 	.word	0x20000010

08002584 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b088      	sub	sp, #32
 8002588:	af02      	add	r7, sp, #8
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	2201      	movs	r2, #1
 8002598:	2102      	movs	r1, #2
 800259a:	68f8      	ldr	r0, [r7, #12]
 800259c:	f7ff ff6a 	bl	8002474 <SPI_WaitFlagStateUntilTimeout>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d007      	beq.n	80025b6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025aa:	f043 0220 	orr.w	r2, r3, #32
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e032      	b.n	800261c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80025b6:	4b1b      	ldr	r3, [pc, #108]	@ (8002624 <SPI_EndRxTxTransaction+0xa0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a1b      	ldr	r2, [pc, #108]	@ (8002628 <SPI_EndRxTxTransaction+0xa4>)
 80025bc:	fba2 2303 	umull	r2, r3, r2, r3
 80025c0:	0d5b      	lsrs	r3, r3, #21
 80025c2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80025c6:	fb02 f303 	mul.w	r3, r2, r3
 80025ca:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80025d4:	d112      	bne.n	80025fc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	9300      	str	r3, [sp, #0]
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	2200      	movs	r2, #0
 80025de:	2180      	movs	r1, #128	@ 0x80
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f7ff ff47 	bl	8002474 <SPI_WaitFlagStateUntilTimeout>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d016      	beq.n	800261a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025f0:	f043 0220 	orr.w	r2, r3, #32
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e00f      	b.n	800261c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00a      	beq.n	8002618 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	3b01      	subs	r3, #1
 8002606:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002612:	2b80      	cmp	r3, #128	@ 0x80
 8002614:	d0f2      	beq.n	80025fc <SPI_EndRxTxTransaction+0x78>
 8002616:	e000      	b.n	800261a <SPI_EndRxTxTransaction+0x96>
        break;
 8002618:	bf00      	nop
  }

  return HAL_OK;
 800261a:	2300      	movs	r3, #0
}
 800261c:	4618      	mov	r0, r3
 800261e:	3718      	adds	r7, #24
 8002620:	46bd      	mov	sp, r7
 8002622:	bd80      	pop	{r7, pc}
 8002624:	20000010 	.word	0x20000010
 8002628:	165e9f81 	.word	0x165e9f81

0800262c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b084      	sub	sp, #16
 8002630:	af00      	add	r7, sp, #0
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	60b9      	str	r1, [r7, #8]
 8002636:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2b00      	cmp	r3, #0
 800263c:	d101      	bne.n	8002642 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e038      	b.n	80026b4 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8002648:	b2db      	uxtb	r3, r3
 800264a:	2b00      	cmp	r3, #0
 800264c:	d106      	bne.n	800265c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f7fe f812 	bl	8000680 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681a      	ldr	r2, [r3, #0]
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	3308      	adds	r3, #8
 8002664:	4619      	mov	r1, r3
 8002666:	4610      	mov	r0, r2
 8002668:	f000 fc98 	bl	8002f9c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6818      	ldr	r0, [r3, #0]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	461a      	mov	r2, r3
 8002676:	68b9      	ldr	r1, [r7, #8]
 8002678:	f000 fcfa 	bl	8003070 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6858      	ldr	r0, [r3, #4]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	689a      	ldr	r2, [r3, #8]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002688:	6879      	ldr	r1, [r7, #4]
 800268a:	f000 fd1f 	bl	80030cc <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	68fa      	ldr	r2, [r7, #12]
 8002694:	6892      	ldr	r2, [r2, #8]
 8002696:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68fa      	ldr	r2, [r7, #12]
 80026a0:	6892      	ldr	r2, [r2, #8]
 80026a2:	f041 0101 	orr.w	r1, r1, #1
 80026a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2201      	movs	r2, #1
 80026ae:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3710      	adds	r7, #16
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d101      	bne.n	80026ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e041      	b.n	8002752 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026d4:	b2db      	uxtb	r3, r3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d106      	bne.n	80026e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2200      	movs	r2, #0
 80026de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f7fe fd0a 	bl	80010fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2202      	movs	r2, #2
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681a      	ldr	r2, [r3, #0]
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	3304      	adds	r3, #4
 80026f8:	4619      	mov	r1, r3
 80026fa:	4610      	mov	r0, r2
 80026fc:	f000 fa7e 	bl	8002bfc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2201      	movs	r2, #1
 8002704:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2201      	movs	r2, #1
 800270c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2201      	movs	r2, #1
 8002714:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2201      	movs	r2, #1
 800271c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2201      	movs	r2, #1
 8002724:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2201      	movs	r2, #1
 800272c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2201      	movs	r2, #1
 800273c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2201      	movs	r2, #1
 800274c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3708      	adds	r7, #8
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
	...

0800275c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b01      	cmp	r3, #1
 800276e:	d001      	beq.n	8002774 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e04e      	b.n	8002812 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2202      	movs	r2, #2
 8002778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f042 0201 	orr.w	r2, r2, #1
 800278a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a23      	ldr	r2, [pc, #140]	@ (8002820 <HAL_TIM_Base_Start_IT+0xc4>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d022      	beq.n	80027dc <HAL_TIM_Base_Start_IT+0x80>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800279e:	d01d      	beq.n	80027dc <HAL_TIM_Base_Start_IT+0x80>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4a1f      	ldr	r2, [pc, #124]	@ (8002824 <HAL_TIM_Base_Start_IT+0xc8>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d018      	beq.n	80027dc <HAL_TIM_Base_Start_IT+0x80>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	4a1e      	ldr	r2, [pc, #120]	@ (8002828 <HAL_TIM_Base_Start_IT+0xcc>)
 80027b0:	4293      	cmp	r3, r2
 80027b2:	d013      	beq.n	80027dc <HAL_TIM_Base_Start_IT+0x80>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a1c      	ldr	r2, [pc, #112]	@ (800282c <HAL_TIM_Base_Start_IT+0xd0>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d00e      	beq.n	80027dc <HAL_TIM_Base_Start_IT+0x80>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4a1b      	ldr	r2, [pc, #108]	@ (8002830 <HAL_TIM_Base_Start_IT+0xd4>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d009      	beq.n	80027dc <HAL_TIM_Base_Start_IT+0x80>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a19      	ldr	r2, [pc, #100]	@ (8002834 <HAL_TIM_Base_Start_IT+0xd8>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d004      	beq.n	80027dc <HAL_TIM_Base_Start_IT+0x80>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a18      	ldr	r2, [pc, #96]	@ (8002838 <HAL_TIM_Base_Start_IT+0xdc>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d111      	bne.n	8002800 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 0307 	and.w	r3, r3, #7
 80027e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2b06      	cmp	r3, #6
 80027ec:	d010      	beq.n	8002810 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f042 0201 	orr.w	r2, r2, #1
 80027fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80027fe:	e007      	b.n	8002810 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681a      	ldr	r2, [r3, #0]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f042 0201 	orr.w	r2, r2, #1
 800280e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	40010000 	.word	0x40010000
 8002824:	40000400 	.word	0x40000400
 8002828:	40000800 	.word	0x40000800
 800282c:	40000c00 	.word	0x40000c00
 8002830:	40010400 	.word	0x40010400
 8002834:	40014000 	.word	0x40014000
 8002838:	40001800 	.word	0x40001800

0800283c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b084      	sub	sp, #16
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	691b      	ldr	r3, [r3, #16]
 8002852:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	f003 0302 	and.w	r3, r3, #2
 800285a:	2b00      	cmp	r3, #0
 800285c:	d020      	beq.n	80028a0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f003 0302 	and.w	r3, r3, #2
 8002864:	2b00      	cmp	r3, #0
 8002866:	d01b      	beq.n	80028a0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f06f 0202 	mvn.w	r2, #2
 8002870:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2201      	movs	r2, #1
 8002876:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	f003 0303 	and.w	r3, r3, #3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d003      	beq.n	800288e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f999 	bl	8002bbe <HAL_TIM_IC_CaptureCallback>
 800288c:	e005      	b.n	800289a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f98b 	bl	8002baa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 f99c 	bl	8002bd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2200      	movs	r2, #0
 800289e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	f003 0304 	and.w	r3, r3, #4
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d020      	beq.n	80028ec <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	f003 0304 	and.w	r3, r3, #4
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d01b      	beq.n	80028ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f06f 0204 	mvn.w	r2, #4
 80028bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2202      	movs	r2, #2
 80028c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	699b      	ldr	r3, [r3, #24]
 80028ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d003      	beq.n	80028da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f000 f973 	bl	8002bbe <HAL_TIM_IC_CaptureCallback>
 80028d8:	e005      	b.n	80028e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f965 	bl	8002baa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028e0:	6878      	ldr	r0, [r7, #4]
 80028e2:	f000 f976 	bl	8002bd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2200      	movs	r2, #0
 80028ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	f003 0308 	and.w	r3, r3, #8
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d020      	beq.n	8002938 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	f003 0308 	and.w	r3, r3, #8
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d01b      	beq.n	8002938 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f06f 0208 	mvn.w	r2, #8
 8002908:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2204      	movs	r2, #4
 800290e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d003      	beq.n	8002926 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f000 f94d 	bl	8002bbe <HAL_TIM_IC_CaptureCallback>
 8002924:	e005      	b.n	8002932 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f93f 	bl	8002baa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 f950 	bl	8002bd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2200      	movs	r2, #0
 8002936:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002938:	68bb      	ldr	r3, [r7, #8]
 800293a:	f003 0310 	and.w	r3, r3, #16
 800293e:	2b00      	cmp	r3, #0
 8002940:	d020      	beq.n	8002984 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f003 0310 	and.w	r3, r3, #16
 8002948:	2b00      	cmp	r3, #0
 800294a:	d01b      	beq.n	8002984 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f06f 0210 	mvn.w	r2, #16
 8002954:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	2208      	movs	r2, #8
 800295a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002966:	2b00      	cmp	r3, #0
 8002968:	d003      	beq.n	8002972 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 f927 	bl	8002bbe <HAL_TIM_IC_CaptureCallback>
 8002970:	e005      	b.n	800297e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f919 	bl	8002baa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 f92a 	bl	8002bd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	2200      	movs	r2, #0
 8002982:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	f003 0301 	and.w	r3, r3, #1
 800298a:	2b00      	cmp	r3, #0
 800298c:	d00c      	beq.n	80029a8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	f003 0301 	and.w	r3, r3, #1
 8002994:	2b00      	cmp	r3, #0
 8002996:	d007      	beq.n	80029a8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f06f 0201 	mvn.w	r2, #1
 80029a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7fe f9dc 	bl	8000d60 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00c      	beq.n	80029cc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d007      	beq.n	80029cc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80029c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 fade 	bl	8002f88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d00c      	beq.n	80029f0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d007      	beq.n	80029f0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80029e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80029ea:	6878      	ldr	r0, [r7, #4]
 80029ec:	f000 f8fb 	bl	8002be6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	f003 0320 	and.w	r3, r3, #32
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00c      	beq.n	8002a14 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d007      	beq.n	8002a14 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f06f 0220 	mvn.w	r2, #32
 8002a0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002a0e:	6878      	ldr	r0, [r7, #4]
 8002a10:	f000 fab0 	bl	8002f74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002a14:	bf00      	nop
 8002a16:	3710      	adds	r7, #16
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b084      	sub	sp, #16
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a26:	2300      	movs	r3, #0
 8002a28:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d101      	bne.n	8002a38 <HAL_TIM_ConfigClockSource+0x1c>
 8002a34:	2302      	movs	r3, #2
 8002a36:	e0b4      	b.n	8002ba2 <HAL_TIM_ConfigClockSource+0x186>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2202      	movs	r2, #2
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002a56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a5e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a70:	d03e      	beq.n	8002af0 <HAL_TIM_ConfigClockSource+0xd4>
 8002a72:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a76:	f200 8087 	bhi.w	8002b88 <HAL_TIM_ConfigClockSource+0x16c>
 8002a7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a7e:	f000 8086 	beq.w	8002b8e <HAL_TIM_ConfigClockSource+0x172>
 8002a82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a86:	d87f      	bhi.n	8002b88 <HAL_TIM_ConfigClockSource+0x16c>
 8002a88:	2b70      	cmp	r3, #112	@ 0x70
 8002a8a:	d01a      	beq.n	8002ac2 <HAL_TIM_ConfigClockSource+0xa6>
 8002a8c:	2b70      	cmp	r3, #112	@ 0x70
 8002a8e:	d87b      	bhi.n	8002b88 <HAL_TIM_ConfigClockSource+0x16c>
 8002a90:	2b60      	cmp	r3, #96	@ 0x60
 8002a92:	d050      	beq.n	8002b36 <HAL_TIM_ConfigClockSource+0x11a>
 8002a94:	2b60      	cmp	r3, #96	@ 0x60
 8002a96:	d877      	bhi.n	8002b88 <HAL_TIM_ConfigClockSource+0x16c>
 8002a98:	2b50      	cmp	r3, #80	@ 0x50
 8002a9a:	d03c      	beq.n	8002b16 <HAL_TIM_ConfigClockSource+0xfa>
 8002a9c:	2b50      	cmp	r3, #80	@ 0x50
 8002a9e:	d873      	bhi.n	8002b88 <HAL_TIM_ConfigClockSource+0x16c>
 8002aa0:	2b40      	cmp	r3, #64	@ 0x40
 8002aa2:	d058      	beq.n	8002b56 <HAL_TIM_ConfigClockSource+0x13a>
 8002aa4:	2b40      	cmp	r3, #64	@ 0x40
 8002aa6:	d86f      	bhi.n	8002b88 <HAL_TIM_ConfigClockSource+0x16c>
 8002aa8:	2b30      	cmp	r3, #48	@ 0x30
 8002aaa:	d064      	beq.n	8002b76 <HAL_TIM_ConfigClockSource+0x15a>
 8002aac:	2b30      	cmp	r3, #48	@ 0x30
 8002aae:	d86b      	bhi.n	8002b88 <HAL_TIM_ConfigClockSource+0x16c>
 8002ab0:	2b20      	cmp	r3, #32
 8002ab2:	d060      	beq.n	8002b76 <HAL_TIM_ConfigClockSource+0x15a>
 8002ab4:	2b20      	cmp	r3, #32
 8002ab6:	d867      	bhi.n	8002b88 <HAL_TIM_ConfigClockSource+0x16c>
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d05c      	beq.n	8002b76 <HAL_TIM_ConfigClockSource+0x15a>
 8002abc:	2b10      	cmp	r3, #16
 8002abe:	d05a      	beq.n	8002b76 <HAL_TIM_ConfigClockSource+0x15a>
 8002ac0:	e062      	b.n	8002b88 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ad2:	f000 f9b3 	bl	8002e3c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002ae4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68ba      	ldr	r2, [r7, #8]
 8002aec:	609a      	str	r2, [r3, #8]
      break;
 8002aee:	e04f      	b.n	8002b90 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002b00:	f000 f99c 	bl	8002e3c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689a      	ldr	r2, [r3, #8]
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002b12:	609a      	str	r2, [r3, #8]
      break;
 8002b14:	e03c      	b.n	8002b90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b1a:	683b      	ldr	r3, [r7, #0]
 8002b1c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b22:	461a      	mov	r2, r3
 8002b24:	f000 f910 	bl	8002d48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2150      	movs	r1, #80	@ 0x50
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f000 f969 	bl	8002e06 <TIM_ITRx_SetConfig>
      break;
 8002b34:	e02c      	b.n	8002b90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002b42:	461a      	mov	r2, r3
 8002b44:	f000 f92f 	bl	8002da6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	2160      	movs	r1, #96	@ 0x60
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f000 f959 	bl	8002e06 <TIM_ITRx_SetConfig>
      break;
 8002b54:	e01c      	b.n	8002b90 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002b62:	461a      	mov	r2, r3
 8002b64:	f000 f8f0 	bl	8002d48 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2140      	movs	r1, #64	@ 0x40
 8002b6e:	4618      	mov	r0, r3
 8002b70:	f000 f949 	bl	8002e06 <TIM_ITRx_SetConfig>
      break;
 8002b74:	e00c      	b.n	8002b90 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4610      	mov	r0, r2
 8002b82:	f000 f940 	bl	8002e06 <TIM_ITRx_SetConfig>
      break;
 8002b86:	e003      	b.n	8002b90 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002b8c:	e000      	b.n	8002b90 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002b8e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002ba0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3710      	adds	r7, #16
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr

08002bbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002bbe:	b480      	push	{r7}
 8002bc0:	b083      	sub	sp, #12
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002bc6:	bf00      	nop
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b083      	sub	sp, #12
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002bee:	bf00      	nop
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr
	...

08002bfc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b085      	sub	sp, #20
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a43      	ldr	r2, [pc, #268]	@ (8002d1c <TIM_Base_SetConfig+0x120>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d013      	beq.n	8002c3c <TIM_Base_SetConfig+0x40>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c1a:	d00f      	beq.n	8002c3c <TIM_Base_SetConfig+0x40>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a40      	ldr	r2, [pc, #256]	@ (8002d20 <TIM_Base_SetConfig+0x124>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d00b      	beq.n	8002c3c <TIM_Base_SetConfig+0x40>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a3f      	ldr	r2, [pc, #252]	@ (8002d24 <TIM_Base_SetConfig+0x128>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d007      	beq.n	8002c3c <TIM_Base_SetConfig+0x40>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a3e      	ldr	r2, [pc, #248]	@ (8002d28 <TIM_Base_SetConfig+0x12c>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d003      	beq.n	8002c3c <TIM_Base_SetConfig+0x40>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	4a3d      	ldr	r2, [pc, #244]	@ (8002d2c <TIM_Base_SetConfig+0x130>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d108      	bne.n	8002c4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002c42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a32      	ldr	r2, [pc, #200]	@ (8002d1c <TIM_Base_SetConfig+0x120>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d02b      	beq.n	8002cae <TIM_Base_SetConfig+0xb2>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002c5c:	d027      	beq.n	8002cae <TIM_Base_SetConfig+0xb2>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	4a2f      	ldr	r2, [pc, #188]	@ (8002d20 <TIM_Base_SetConfig+0x124>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d023      	beq.n	8002cae <TIM_Base_SetConfig+0xb2>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	4a2e      	ldr	r2, [pc, #184]	@ (8002d24 <TIM_Base_SetConfig+0x128>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d01f      	beq.n	8002cae <TIM_Base_SetConfig+0xb2>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4a2d      	ldr	r2, [pc, #180]	@ (8002d28 <TIM_Base_SetConfig+0x12c>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d01b      	beq.n	8002cae <TIM_Base_SetConfig+0xb2>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	4a2c      	ldr	r2, [pc, #176]	@ (8002d2c <TIM_Base_SetConfig+0x130>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d017      	beq.n	8002cae <TIM_Base_SetConfig+0xb2>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4a2b      	ldr	r2, [pc, #172]	@ (8002d30 <TIM_Base_SetConfig+0x134>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d013      	beq.n	8002cae <TIM_Base_SetConfig+0xb2>
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4a2a      	ldr	r2, [pc, #168]	@ (8002d34 <TIM_Base_SetConfig+0x138>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d00f      	beq.n	8002cae <TIM_Base_SetConfig+0xb2>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	4a29      	ldr	r2, [pc, #164]	@ (8002d38 <TIM_Base_SetConfig+0x13c>)
 8002c92:	4293      	cmp	r3, r2
 8002c94:	d00b      	beq.n	8002cae <TIM_Base_SetConfig+0xb2>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	4a28      	ldr	r2, [pc, #160]	@ (8002d3c <TIM_Base_SetConfig+0x140>)
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d007      	beq.n	8002cae <TIM_Base_SetConfig+0xb2>
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	4a27      	ldr	r2, [pc, #156]	@ (8002d40 <TIM_Base_SetConfig+0x144>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d003      	beq.n	8002cae <TIM_Base_SetConfig+0xb2>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	4a26      	ldr	r2, [pc, #152]	@ (8002d44 <TIM_Base_SetConfig+0x148>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d108      	bne.n	8002cc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002cb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	68db      	ldr	r3, [r3, #12]
 8002cba:	68fa      	ldr	r2, [r7, #12]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	695b      	ldr	r3, [r3, #20]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	689a      	ldr	r2, [r3, #8]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	681a      	ldr	r2, [r3, #0]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a0e      	ldr	r2, [pc, #56]	@ (8002d1c <TIM_Base_SetConfig+0x120>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d003      	beq.n	8002cee <TIM_Base_SetConfig+0xf2>
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	4a10      	ldr	r2, [pc, #64]	@ (8002d2c <TIM_Base_SetConfig+0x130>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d103      	bne.n	8002cf6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	691a      	ldr	r2, [r3, #16]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f043 0204 	orr.w	r2, r3, #4
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68fa      	ldr	r2, [r7, #12]
 8002d0c:	601a      	str	r2, [r3, #0]
}
 8002d0e:	bf00      	nop
 8002d10:	3714      	adds	r7, #20
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	40010000 	.word	0x40010000
 8002d20:	40000400 	.word	0x40000400
 8002d24:	40000800 	.word	0x40000800
 8002d28:	40000c00 	.word	0x40000c00
 8002d2c:	40010400 	.word	0x40010400
 8002d30:	40014000 	.word	0x40014000
 8002d34:	40014400 	.word	0x40014400
 8002d38:	40014800 	.word	0x40014800
 8002d3c:	40001800 	.word	0x40001800
 8002d40:	40001c00 	.word	0x40001c00
 8002d44:	40002000 	.word	0x40002000

08002d48 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b087      	sub	sp, #28
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	60f8      	str	r0, [r7, #12]
 8002d50:	60b9      	str	r1, [r7, #8]
 8002d52:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	f023 0201 	bic.w	r2, r3, #1
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d6c:	693b      	ldr	r3, [r7, #16]
 8002d6e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002d72:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	011b      	lsls	r3, r3, #4
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f023 030a 	bic.w	r3, r3, #10
 8002d84:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	693a      	ldr	r2, [r7, #16]
 8002d92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	697a      	ldr	r2, [r7, #20]
 8002d98:	621a      	str	r2, [r3, #32]
}
 8002d9a:	bf00      	nop
 8002d9c:	371c      	adds	r7, #28
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b087      	sub	sp, #28
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	60f8      	str	r0, [r7, #12]
 8002dae:	60b9      	str	r1, [r7, #8]
 8002db0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	f023 0210 	bic.w	r2, r3, #16
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	699b      	ldr	r3, [r3, #24]
 8002dc8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002dd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	031b      	lsls	r3, r3, #12
 8002dd6:	693a      	ldr	r2, [r7, #16]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002de2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002de4:	68bb      	ldr	r3, [r7, #8]
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	4313      	orrs	r3, r2
 8002dec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	693a      	ldr	r2, [r7, #16]
 8002df2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	697a      	ldr	r2, [r7, #20]
 8002df8:	621a      	str	r2, [r3, #32]
}
 8002dfa:	bf00      	nop
 8002dfc:	371c      	adds	r7, #28
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr

08002e06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002e06:	b480      	push	{r7}
 8002e08:	b085      	sub	sp, #20
 8002e0a:	af00      	add	r7, sp, #0
 8002e0c:	6078      	str	r0, [r7, #4]
 8002e0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	689b      	ldr	r3, [r3, #8]
 8002e14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002e1e:	683a      	ldr	r2, [r7, #0]
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	4313      	orrs	r3, r2
 8002e24:	f043 0307 	orr.w	r3, r3, #7
 8002e28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	68fa      	ldr	r2, [r7, #12]
 8002e2e:	609a      	str	r2, [r3, #8]
}
 8002e30:	bf00      	nop
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b087      	sub	sp, #28
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
 8002e48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e50:	697b      	ldr	r3, [r7, #20]
 8002e52:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	021a      	lsls	r2, r3, #8
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	431a      	orrs	r2, r3
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	697a      	ldr	r2, [r7, #20]
 8002e66:	4313      	orrs	r3, r2
 8002e68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	697a      	ldr	r2, [r7, #20]
 8002e6e:	609a      	str	r2, [r3, #8]
}
 8002e70:	bf00      	nop
 8002e72:	371c      	adds	r7, #28
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr

08002e7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b085      	sub	sp, #20
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	6078      	str	r0, [r7, #4]
 8002e84:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d101      	bne.n	8002e94 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e90:	2302      	movs	r3, #2
 8002e92:	e05a      	b.n	8002f4a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2202      	movs	r2, #2
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002eba:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	68fa      	ldr	r2, [r7, #12]
 8002ecc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a21      	ldr	r2, [pc, #132]	@ (8002f58 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d022      	beq.n	8002f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ee0:	d01d      	beq.n	8002f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a1d      	ldr	r2, [pc, #116]	@ (8002f5c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d018      	beq.n	8002f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a1b      	ldr	r2, [pc, #108]	@ (8002f60 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d013      	beq.n	8002f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a1a      	ldr	r2, [pc, #104]	@ (8002f64 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d00e      	beq.n	8002f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a18      	ldr	r2, [pc, #96]	@ (8002f68 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d009      	beq.n	8002f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a17      	ldr	r2, [pc, #92]	@ (8002f6c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d004      	beq.n	8002f1e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a15      	ldr	r2, [pc, #84]	@ (8002f70 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d10c      	bne.n	8002f38 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002f24:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	68ba      	ldr	r2, [r7, #8]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68ba      	ldr	r2, [r7, #8]
 8002f36:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3714      	adds	r7, #20
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr
 8002f56:	bf00      	nop
 8002f58:	40010000 	.word	0x40010000
 8002f5c:	40000400 	.word	0x40000400
 8002f60:	40000800 	.word	0x40000800
 8002f64:	40000c00 	.word	0x40000c00
 8002f68:	40010400 	.word	0x40010400
 8002f6c:	40014000 	.word	0x40014000
 8002f70:	40001800 	.word	0x40001800

08002f74 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                     const FSMC_NORSRAM_InitTypeDef *Init)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b087      	sub	sp, #28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8002fa6:	683b      	ldr	r3, [r7, #0]
 8002fa8:	681a      	ldr	r2, [r3, #0]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fb0:	683a      	ldr	r2, [r7, #0]
 8002fb2:	6812      	ldr	r2, [r2, #0]
 8002fb4:	f023 0101 	bic.w	r1, r3, #1
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	689b      	ldr	r3, [r3, #8]
 8002fc2:	2b08      	cmp	r3, #8
 8002fc4:	d102      	bne.n	8002fcc <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8002fc6:	2340      	movs	r3, #64	@ 0x40
 8002fc8:	617b      	str	r3, [r7, #20]
 8002fca:	e001      	b.n	8002fd0 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8002fdc:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8002fe2:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8002fe8:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8002fee:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8002ff4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8002ffa:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8003000:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8003006:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 800300c:	431a      	orrs	r2, r3
              Init->WriteBurst);
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8003012:	4313      	orrs	r3, r2
 8003014:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	699b      	ldr	r3, [r3, #24]
 800301a:	693a      	ldr	r2, [r7, #16]
 800301c:	4313      	orrs	r3, r2
 800301e:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	4313      	orrs	r3, r2
 8003028:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 800302a:	4b10      	ldr	r3, [pc, #64]	@ (800306c <FSMC_NORSRAM_Init+0xd0>)
 800302c:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003034:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 800303c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	43db      	mvns	r3, r3
 800304c:	ea02 0103 	and.w	r1, r2, r3
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	4319      	orrs	r1, r3
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 800305e:	2300      	movs	r3, #0
}
 8003060:	4618      	mov	r0, r3
 8003062:	371c      	adds	r7, #28
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	0008fb7f 	.word	0x0008fb7f

08003070 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                           const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003070:	b480      	push	{r7}
 8003072:	b085      	sub	sp, #20
 8003074:	af00      	add	r7, sp, #0
 8003076:	60f8      	str	r0, [r7, #12]
 8003078:	60b9      	str	r1, [r7, #8]
 800307a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  Device->BTCR[Bank + 1U] =
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	681a      	ldr	r2, [r3, #0]
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	011b      	lsls	r3, r3, #4
    (Timing->AddressSetupTime << FSMC_BTR1_ADDSET_Pos) |
 8003086:	431a      	orrs	r2, r3
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	021b      	lsls	r3, r3, #8
    (Timing->AddressHoldTime << FSMC_BTR1_ADDHLD_Pos) |
 800308e:	431a      	orrs	r2, r3
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	041b      	lsls	r3, r3, #16
    (Timing->DataSetupTime << FSMC_BTR1_DATAST_Pos) |
 8003096:	431a      	orrs	r2, r3
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 8003098:	68bb      	ldr	r3, [r7, #8]
 800309a:	691b      	ldr	r3, [r3, #16]
 800309c:	3b01      	subs	r3, #1
 800309e:	051b      	lsls	r3, r3, #20
    (Timing->BusTurnAroundDuration << FSMC_BTR1_BUSTURN_Pos) |
 80030a0:	431a      	orrs	r2, r3
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	3b02      	subs	r3, #2
 80030a8:	061b      	lsls	r3, r3, #24
    ((Timing->CLKDivision - 1U) << FSMC_BTR1_CLKDIV_Pos) |
 80030aa:	ea42 0103 	orr.w	r1, r2, r3
    Timing->AccessMode;
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	699b      	ldr	r3, [r3, #24]
  Device->BTCR[Bank + 1U] =
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	3201      	adds	r2, #1
    ((Timing->DataLatency - 2U) << FSMC_BTR1_DATLAT_Pos) |
 80030b6:	4319      	orrs	r1, r3
  Device->BTCR[Bank + 1U] =
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif /* FSMC_BCR1_CCLKEN */
  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr

080030cc <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                    const FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                    uint32_t ExtendedMode)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	60b9      	str	r1, [r7, #8]
 80030d6:	607a      	str	r2, [r7, #4]
 80030d8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80030e0:	d11d      	bne.n	800311e <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80030ea:	4b13      	ldr	r3, [pc, #76]	@ (8003138 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80030ec:	4013      	ands	r3, r2
 80030ee:	68ba      	ldr	r2, [r7, #8]
 80030f0:	6811      	ldr	r1, [r2, #0]
 80030f2:	68ba      	ldr	r2, [r7, #8]
 80030f4:	6852      	ldr	r2, [r2, #4]
 80030f6:	0112      	lsls	r2, r2, #4
 80030f8:	4311      	orrs	r1, r2
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	6892      	ldr	r2, [r2, #8]
 80030fe:	0212      	lsls	r2, r2, #8
 8003100:	4311      	orrs	r1, r2
 8003102:	68ba      	ldr	r2, [r7, #8]
 8003104:	6992      	ldr	r2, [r2, #24]
 8003106:	4311      	orrs	r1, r2
 8003108:	68ba      	ldr	r2, [r7, #8]
 800310a:	68d2      	ldr	r2, [r2, #12]
 800310c:	0412      	lsls	r2, r2, #16
 800310e:	430a      	orrs	r2, r1
 8003110:	ea43 0102 	orr.w	r1, r3, r2
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800311c:	e005      	b.n	800312a <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8003126:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	4618      	mov	r0, r3
 800312e:	3714      	adds	r7, #20
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr
 8003138:	cff00000 	.word	0xcff00000

0800313c <memset>:
 800313c:	4402      	add	r2, r0
 800313e:	4603      	mov	r3, r0
 8003140:	4293      	cmp	r3, r2
 8003142:	d100      	bne.n	8003146 <memset+0xa>
 8003144:	4770      	bx	lr
 8003146:	f803 1b01 	strb.w	r1, [r3], #1
 800314a:	e7f9      	b.n	8003140 <memset+0x4>

0800314c <__libc_init_array>:
 800314c:	b570      	push	{r4, r5, r6, lr}
 800314e:	4d0d      	ldr	r5, [pc, #52]	@ (8003184 <__libc_init_array+0x38>)
 8003150:	4c0d      	ldr	r4, [pc, #52]	@ (8003188 <__libc_init_array+0x3c>)
 8003152:	1b64      	subs	r4, r4, r5
 8003154:	10a4      	asrs	r4, r4, #2
 8003156:	2600      	movs	r6, #0
 8003158:	42a6      	cmp	r6, r4
 800315a:	d109      	bne.n	8003170 <__libc_init_array+0x24>
 800315c:	4d0b      	ldr	r5, [pc, #44]	@ (800318c <__libc_init_array+0x40>)
 800315e:	4c0c      	ldr	r4, [pc, #48]	@ (8003190 <__libc_init_array+0x44>)
 8003160:	f000 f818 	bl	8003194 <_init>
 8003164:	1b64      	subs	r4, r4, r5
 8003166:	10a4      	asrs	r4, r4, #2
 8003168:	2600      	movs	r6, #0
 800316a:	42a6      	cmp	r6, r4
 800316c:	d105      	bne.n	800317a <__libc_init_array+0x2e>
 800316e:	bd70      	pop	{r4, r5, r6, pc}
 8003170:	f855 3b04 	ldr.w	r3, [r5], #4
 8003174:	4798      	blx	r3
 8003176:	3601      	adds	r6, #1
 8003178:	e7ee      	b.n	8003158 <__libc_init_array+0xc>
 800317a:	f855 3b04 	ldr.w	r3, [r5], #4
 800317e:	4798      	blx	r3
 8003180:	3601      	adds	r6, #1
 8003182:	e7f2      	b.n	800316a <__libc_init_array+0x1e>
 8003184:	080031c4 	.word	0x080031c4
 8003188:	080031c4 	.word	0x080031c4
 800318c:	080031c4 	.word	0x080031c4
 8003190:	080031c8 	.word	0x080031c8

08003194 <_init>:
 8003194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003196:	bf00      	nop
 8003198:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800319a:	bc08      	pop	{r3}
 800319c:	469e      	mov	lr, r3
 800319e:	4770      	bx	lr

080031a0 <_fini>:
 80031a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031a2:	bf00      	nop
 80031a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031a6:	bc08      	pop	{r3}
 80031a8:	469e      	mov	lr, r3
 80031aa:	4770      	bx	lr
